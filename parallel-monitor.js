// parallel-monitor.js - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const logger = require('./logger');

class ParallelMonitor {
    constructor(truthSocialAPI, postCallback, connectionPool) {
        this.truthSocialAPI = truthSocialAPI;
        this.postCallback = postCallback;
        this.connectionPool = connectionPool; // ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        this.streams = new Map();
        this.lastPostIds = new Map();
        this.isRunning = false;
        this.profiles = [];
        
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)
this.streamCount = 20; // ‚Üê 30 –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ)
this.streamInterval = 20000; // 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
this.startDelay = 400; // 0.5 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
    }

  // –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ 
async startParallelMonitoring(profiles) {
    if (this.isRunning) {
        logger.warn('‚ö†Ô∏è Parallel monitoring already running');
        return { success: false, error: 'Already running' };
    }

    this.profiles = profiles;
    
    const streamsPerProfile = this.streamCount; // ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    const totalStreamsNeeded = profiles.length * streamsPerProfile;

    logger.info(`üöÄ Starting ${streamsPerProfile} streams for EACH of ${profiles.length} users (total: ${totalStreamsNeeded} streams)...`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    logger.info(`üîß Initializing stable connection pool for ${totalStreamsNeeded} streams...`);
    const connectionsReady = await this.connectionPool.initializePool(totalStreamsNeeded);
    
    if (connectionsReady < totalStreamsNeeded) {
        logger.warn(`‚ö†Ô∏è Only ${connectionsReady} stable connections available, continuing with available connections`);
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const actualStreamsPerProfile = Math.floor(connectionsReady / profiles.length);
        logger.info(`üìä Adjusted to ${actualStreamsPerProfile} streams per profile`);
    }
    
    this.isRunning = true;

    logger.info(`üöÄ Starting ${streamsPerProfile} parallel monitoring streams per user...`);
    logger.info(`üìä Settings: ${streamsPerProfile} streams √ó ${this.streamInterval/1000}s interval = ~${this.streamInterval/streamsPerProfile/1000}s effective rate`);

    let streamId = 0;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let profileIndex = 0; profileIndex < profiles.length; profileIndex++) {
        const profile = profiles[profileIndex];
        
        logger.info(`üë§ Starting ${streamsPerProfile} dedicated streams for @${profile.username}...`);
        
        // 10 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (let userStreamIndex = 0; userStreamIndex < streamsPerProfile; userStreamIndex++) {
            const delay = streamId * this.startDelay; // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏
            const currentStreamId = streamId;
            
            logger.info(`üöÄ Scheduling stream #${currentStreamId} for @${profile.username} with ${delay}ms delay`);
            
            setTimeout(() => {
                this.startUserDedicatedStream(currentStreamId, profile.username, userStreamIndex);
            }, delay);
            
            streamId++;
        }
    }

    logger.info(`üìä Total streams scheduled: ${streamId}`);

    return {
        success: true,
        message: `Started ${streamsPerProfile} streams for each of ${profiles.length} users`,
        totalStreams: streamId,
        streamsPerProfile: streamsPerProfile,
        profilesCount: profiles.length,
        effectiveRatePerProfile: Math.round(this.streamInterval / streamsPerProfile)
    };
}

// –ó–∞–ø—É—Å–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
startUserDedicatedStream(streamId, username, userStreamIndex) {
    logger.info(`üîÑ Starting dedicated stream #${streamId} for @${username} (user stream ${userStreamIndex})`);

    const streamMonitor = async () => {
        await this.monitorSingleProfile(streamId, username, userStreamIndex);
    };

    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    streamMonitor();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    const intervalId = setInterval(streamMonitor, this.streamInterval);
    this.streams.set(streamId, intervalId); // ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π streamId

    logger.info(`‚úÖ Dedicated stream #${streamId} started for @${username} (every ${this.streamInterval/1000}s)`);
}

    // –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    startMonitoringStream(streamId) {
        logger.info(`üîÑ Starting monitoring stream #${streamId}`);

        const streamMonitor = async () => {
            const startTime = Date.now();
            
            try {
                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ
                for (const profile of this.profiles) {
                    await this.monitorProfileInStream(profile.username, streamId);
                }

                const duration = Date.now() - startTime;
                logger.info(`‚ö° Stream #${streamId} completed cycle in ${duration}ms (${this.profiles.length} profiles)`);

            } catch (error) {
                logger.error(`‚ùå Stream #${streamId} error: ${error.message}`);
            }
        };

        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
        streamMonitor();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        const intervalId = setInterval(streamMonitor, this.streamInterval);
        this.streams.set(streamId, intervalId);

        logger.info(`‚úÖ Stream #${streamId} started (every ${this.streamInterval/1000}s)`);
    }


    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ
async monitorSingleProfile(streamId, username, userStreamIndex) {
    const streamKey = `${username}_stream${streamId}`;
    const startTime = Date.now();

    try {
        logger.info(`üîç Stream #${streamId}: Checking @${username} (user stream ${userStreamIndex})...`);

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        const connection = this.connectionPool.getConnectionForStream(streamId);
        
        if (!connection) {
            logger.warn(`‚ö†Ô∏è Stream #${streamId}: No stable connection available, searching for new proxy...`);
            await this.replaceFailedConnection(streamId);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
        const result = await this.truthSocialAPI.getUserPosts(username, 1);
        const responseTime = Date.now() - startTime;

        if (result.success && result.posts.length > 0) {
            const latestPost = result.posts[0];
            const lastPostId = this.lastPostIds.get(streamKey);
            const isNewPost = lastPostId !== latestPost.id;

            // –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ callback
            if (this.postCallback) {
                this.postCallback({
                    type: isNewPost ? 'new_post' : 'check_result',
                    profile: username,
                    post: latestPost,
                    foundAt: new Date().toISOString(),
                    streamId: streamId,
                    userStreamIndex: userStreamIndex,
                    responseTime: responseTime,
                    method: result.method,
                    isNewPost: isNewPost
                });
            }

            if (isNewPost) {
                // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                this.lastPostIds.set(streamKey, latestPost.id);
                if (connection) connection.successCount++;

                logger.info(`üéØ Stream #${streamId}: NEW POST from @${username}! (user stream ${userStreamIndex}, ${responseTime}ms)`);
                logger.info(`üìù Content: "${latestPost.content.substring(0, 100)}..."`);
            } else {
                if (connection) connection.successCount++;
                logger.info(`‚úÖ Stream #${streamId}: @${username} no new posts (user stream ${userStreamIndex}, ${responseTime}ms)`);
            }
        } else {
            if (connection) connection.errorCount++;
            logger.warn(`‚ö†Ô∏è Stream #${streamId}: Failed to get posts for @${username}: ${result.error}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (connection && connection.errorCount > 3) {
                logger.info(`üîÑ Stream #${streamId}: Too many errors, replacing connection...`);
                await this.replaceFailedConnection(streamId);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏
            if (this.postCallback) {
                this.postCallback({
                    type: 'error',
                    profile: username,
                    foundAt: new Date().toISOString(),
                    streamId: streamId,
                    userStreamIndex: userStreamIndex,
                    responseTime: responseTime,
                    error: result.error
                });
            }
        }

    } catch (error) {
        const responseTime = Date.now() - startTime;
        logger.error(`‚ùå Stream #${streamId}: Error monitoring @${username} (${responseTime}ms): ${error.message}`);
    }
} 

// –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏
async findMoreWorkingProxies(needed) {
    logger.info(`üîç Searching for ${needed} more working proxies...`);
    
    const allProxies = this.truthSocialAPI.allProxies;
    const whiteList = this.truthSocialAPI.whiteList;
    const blackList = this.truthSocialAPI.blackList;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    const untestedProxies = allProxies.filter(proxy => 
        !whiteList.has(proxy) && !blackList.has(proxy)
    );
    
    let found = 0;
    
    for (const proxy of untestedProxies) {
        if (found >= needed) break;
        
        logger.info(`üß™ Testing proxy: ${proxy.split('@')[0]}@***`);
        
        try {
            const agent = this.truthSocialAPI.createProxyAgent(proxy);
            const testUrl = 'https://truthsocial.com/api/v1/instance';
            
            const startTime = Date.now();
            const response = await this.truthSocialAPI.makeRequest(testUrl, {
                timeout: 5000,
                agent: agent
            });
            const testTime = Date.now() - startTime;
            
            if (response.success) {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
                await this.truthSocialAPI.addToWhiteList(proxy, 'manual_test');
                logger.info(`‚úÖ Found working proxy: ${proxy.split('@')[0]}@*** (${testTime}ms)`);
                found++;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                await this.truthSocialAPI.addToBlackList(proxy, 'manual_test_failed');
                logger.warn(`‚ùå Proxy failed: ${proxy.split('@')[0]}@***`);
            }
            
        } catch (error) {
            await this.truthSocialAPI.addToBlackList(proxy, 'manual_test_error');
            logger.warn(`‚ùå Proxy error: ${proxy.split('@')[0]}@*** - ${error.message}`);
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    logger.info(`üéØ Found ${found} additional working proxies`);
    return found;
}

// –ó–∞–º–µ–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async replaceFailedConnection(streamId) {
    logger.info(`üîÑ Replacing failed connection for stream #${streamId}...`);
    
    // –ò—â–µ–º –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏
    const newProxiesFound = await this.findMoreWorkingProxies(1);
    
    if (newProxiesFound > 0) {
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await this.connectionPool.initializePool(this.streams.size);
        logger.info(`‚úÖ Stream #${streamId}: Connection replaced successfully`);
    } else {
        logger.warn(`‚ö†Ô∏è Stream #${streamId}: No replacement proxy found`);
    }
}

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Ç–æ–∫–µ
async monitorProfileInStream(username, streamId) {
    const streamKey = `${username}_stream${streamId}`;
    const startTime = Date.now();

    try {
        logger.info(`üîç Stream #${streamId}: Checking @${username}...`);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
        const result = await this.truthSocialAPI.getUserPosts(username, 1);
        const responseTime = Date.now() - startTime;

        if (result.success && result.posts.length > 0) {
            const latestPost = result.posts[0];
            const lastPostId = this.lastPostIds.get(streamKey);
            const isNewPost = lastPostId !== latestPost.id;

            // –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ callback
            if (this.postCallback) {
                this.postCallback({
                    type: isNewPost ? 'new_post' : 'check_result',
                    profile: username,
                    post: latestPost,
                    foundAt: new Date().toISOString(),
                    streamId: streamId,
                    responseTime: responseTime,
                    method: result.method,
                    isNewPost: isNewPost
                });
            }

            if (isNewPost) {
                // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                this.lastPostIds.set(streamKey, latestPost.id);
                logger.info(`üéØ Stream #${streamId}: NEW POST from @${username}! Response time: ${responseTime}ms`);
                logger.info(`üìù Content: "${latestPost.content.substring(0, 100)}..."`);
                logger.info(`‚è∞ Created: ${latestPost.createdAt}`);
            } else {
                logger.info(`‚úÖ Stream #${streamId}: @${username} no new posts (${responseTime}ms)`);
            }
        } else {
            logger.warn(`‚ö†Ô∏è Stream #${streamId}: Failed to get posts for @${username}: ${result.error}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏
            if (this.postCallback) {
                this.postCallback({
                    type: 'error',
                    profile: username,
                    foundAt: new Date().toISOString(),
                    streamId: streamId,
                    responseTime: responseTime,
                    error: result.error
                });
            }
        }

    } catch (error) {
        const responseTime = Date.now() - startTime;
        logger.error(`‚ùå Stream #${streamId}: Error monitoring @${username} (${responseTime}ms): ${error.message}`);
    }
}

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    stopParallelMonitoring() {
        if (!this.isRunning) {
            return { success: false, error: 'Not running' };
        }

        logger.info(`üõë Stopping ${this.streams.size} monitoring streams...`);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for (const [streamId, intervalId] of this.streams) {
            clearInterval(intervalId);
            logger.info(`‚èπÔ∏è Stream #${streamId} stopped`);
        }

        this.streams.clear();
        this.lastPostIds.clear();
        this.isRunning = false;

        logger.info(`‚úÖ All parallel monitoring streams stopped`);

        return {
            success: true,
            message: 'All streams stopped',
            stoppedStreams: this.streamCount
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç–æ–∫–æ–≤
    getStats() {
        return {
            isRunning: this.isRunning,
            activeStreams: this.streams.size,
            streamCount: this.streamCount,
            streamInterval: this.streamInterval,
            effectiveRate: this.isRunning ? Math.round(this.streamInterval / this.streamCount) : 0,
            profilesCount: this.profiles.length,
            totalRequestsPerMinute: this.isRunning ? Math.round((60000 / this.streamInterval) * this.streamCount * this.profiles.length) : 0
        };
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ç–æ–∫–æ–≤ (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    updateSettings(newStreamCount = null, newInterval = null) {
        if (newStreamCount && newStreamCount !== this.streamCount) {
            this.streamCount = newStreamCount;
            logger.info(`üîß Updated stream count to: ${this.streamCount}`);
        }

        if (newInterval && newInterval !== this.streamInterval) {
            this.streamInterval = newInterval;
            logger.info(`üîß Updated stream interval to: ${this.streamInterval}ms`);
        }

        return this.getStats();
    }
}

module.exports = ParallelMonitor;