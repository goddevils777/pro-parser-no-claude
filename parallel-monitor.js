// parallel-monitor.js - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const logger = require('./logger');

class ParallelMonitor {
    constructor(truthSocialAPI, postCallback, connectionPool) {
        this.truthSocialAPI = truthSocialAPI;
        this.postCallback = postCallback;
        this.connectionPool = connectionPool;
        this.streams = new Map();
        this.lastPostIds = new Map();
        this.isRunning = false;
        this.profiles = [];
        
        // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        this.globalLastPostIds = new Map();
        this.postUpdateLock = new Map();
        
        // –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ú–ì–ù–û–í–ï–ù–ù–û–ì–û –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø
        this.streamCount = 25; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 25 –ø–æ—Ç–æ–∫–æ–≤
        this.streamInterval = 8000; // 8 —Å–µ–∫—É–Ω–¥ (8000 / 25 = 320ms —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!)
        this.startDelay = 200; // –ö–∞–∂–¥—ã–µ 200ms –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
        this.maxErrorsBeforeReplace = 1; // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.cooldownAfterError = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –ø–∞—É–∑–∞
        
        // –°–ò–°–¢–ï–ú–ê –ú–ì–ù–û–í–ï–ù–ù–û–ì–û –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø
        this.turboMode = true; // –¢—É—Ä–±–æ —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω
        this.minGapBetweenRequests = 200; // –ú–∏–Ω–∏–º—É–º 200ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        this.lastRequestTimes = new Map();
        this.detectionHistory = []; // –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async startParallelMonitoring(profiles) {
        if (this.isRunning) {
            logger.warn('‚ö†Ô∏è Parallel monitoring already running');
            return { success: false, error: 'Already running' };
        }

        this.profiles = profiles;
        
        const streamsPerProfile = this.streamCount;
        const totalStreamsNeeded = profiles.length * streamsPerProfile;

        logger.info(`üöÄ TURBO MODE: Starting ${streamsPerProfile} streams for EACH of ${profiles.length} users (total: ${totalStreamsNeeded} streams)...`);
        logger.info(`‚ö° Target speed: ${this.streamInterval / this.streamCount}ms between checks`);
        
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        logger.info(`üîß Initializing stable connection pool for ${totalStreamsNeeded} streams...`);
        const connectionsReady = await this.connectionPool.initializePool(totalStreamsNeeded);
        
        if (connectionsReady < totalStreamsNeeded) {
            logger.warn(`‚ö†Ô∏è Only ${connectionsReady} stable connections available, continuing with available connections`);
            const actualStreamsPerProfile = Math.floor(connectionsReady / profiles.length);
            logger.info(`üìä Adjusted to ${actualStreamsPerProfile} streams per profile`);
        }
        
        // 2. –ó–ê–ü–£–°–ö–ê–ï–ú –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì
        this.isRunning = true;

        logger.info(`üöÄ Starting ${streamsPerProfile} TURBO monitoring streams per user...`);
        logger.info(`üìä Settings: ${streamsPerProfile} streams √ó ${this.streamInterval/1000}s interval = ~${this.streamInterval/streamsPerProfile}ms effective rate`);

        let streamId = 0;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (let profileIndex = 0; profileIndex < profiles.length; profileIndex++) {
            const profile = profiles[profileIndex];
            
            logger.info(`üë§ Starting ${streamsPerProfile} TURBO streams for @${profile.username}...`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –≤–µ–±
            if (global.io) {
                global.io.emit('log', {
                    level: 'info',
                    message: `üë§ Creating ${streamsPerProfile} TURBO streams for @${profile.username}...`
                });
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (let userStreamIndex = 0; userStreamIndex < streamsPerProfile; userStreamIndex++) {
                const delay = streamId * this.startDelay;
                const currentStreamId = streamId;
                
                logger.info(`üöÄ Scheduling TURBO stream #${currentStreamId} for @${profile.username} with ${delay}ms delay`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –≤–µ–±
                if (global.io) {
                    global.io.emit('log', {
                        level: 'success',
                        message: `‚ö° TURBO Stream #${currentStreamId} scheduled for @${profile.username} (${streamId + 1}/${totalStreamsNeeded} total)`
                    });
                }
                
                setTimeout(() => {
                    this.startUserDedicatedStream(currentStreamId, profile.username, userStreamIndex);
                }, delay);
                
                streamId++;
            }
        }

        logger.info(`üìä Total TURBO streams scheduled: ${streamId}`);
        logger.info(`‚úÖ TURBO monitoring started successfully!`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –≤–µ–±
        if (global.io) {
            global.io.emit('log', {
                level: 'success',
                message: `üéØ All ${streamId} TURBO streams scheduled! INSTANT detection in ${(streamId * this.startDelay)/1000} seconds`
            });
        }

        return {
            success: true,
            message: `Started ${streamId} TURBO streams for ${profiles.length} profiles`,
            streamCount: streamId,
            streamsPerProfile: streamsPerProfile,
            totalStreams: streamId,
            profilesCount: profiles.length,
            effectiveRatePerProfile: Math.round(this.streamInterval / streamsPerProfile),
            turboMode: this.turboMode
        };
    }

    // –ó–∞–ø—É—Å–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    startUserDedicatedStream(streamId, username, userStreamIndex) {
        logger.info(`üîÑ Starting TURBO stream #${streamId} for @${username} (user stream ${userStreamIndex})`);

        const streamMonitor = async () => {
            await this.monitorSingleProfile(streamId, username, userStreamIndex);
        };

        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
        streamMonitor();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        const intervalId = setInterval(streamMonitor, this.streamInterval);
        this.streams.set(streamId, intervalId);

        logger.info(`‚úÖ TURBO stream #${streamId} started for @${username} (every ${this.streamInterval/1000}s)`);
    }

    // –≠–ö–°–¢–†–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
    async emergencyGlobalSync(username, newPostId, discovererStreamId) {
        logger.info(`üö® EMERGENCY SYNC: New post detected by Stream #${discovererStreamId}!`);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        let syncedStreams = 0;
        for (let i = 0; i < this.streamCount; i++) {
            const streamKey = `${username}_stream${i}`;
            this.lastPostIds.set(streamKey, newPostId);
            syncedStreams++;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        this.detectionHistory.push({
            username: username,
            postId: newPostId,
            discoveredBy: discovererStreamId,
            detectedAt: Date.now(),
            syncedStreams: syncedStreams
        });
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        if (this.detectionHistory.length > 10) {
            this.detectionHistory.shift();
        }
        
        logger.info(`üö® EMERGENCY SYNC COMPLETE: ${syncedStreams} streams updated instantly!`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≤–µ–±
        if (global.io) {
            global.io.emit('log', {
                level: 'success',
                message: `üö® INSTANT DETECTION: Stream #${discovererStreamId} found new post ‚Üí ${syncedStreams} streams synced!`
            });
        }
        
        return syncedStreams;
    }

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è updateGlobalLastPostId —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    updateGlobalLastPostId(username, newPostId, discovererStreamId) {
        const currentGlobalId = this.globalLastPostIds.get(username);
        
        logger.info(`üîç TURBO check @${username}: current="${currentGlobalId}" new="${newPostId}" by Stream #${discovererStreamId}`);
        
        if (currentGlobalId !== newPostId) {
            // –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê - —Ç–æ–ª—å–∫–æ 300ms –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π (—É—Å–∫–æ—Ä–µ–Ω–æ!)
            const lockKey = `${username}_update`;
            const now = Date.now();
            const lastUpdate = this.postUpdateLock.get(lockKey) || 0;
            
            if (now - lastUpdate < 300) { // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 300ms –¥–ª—è –¢–£–†–ë–û
                logger.info(`üîí Update blocked for @${username}: too recent (${now - lastUpdate}ms ago)`);
                return false;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ID
            this.globalLastPostIds.set(username, newPostId);
            this.postUpdateLock.set(lockKey, now);
            
            // –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–°–ï–• –ü–û–¢–û–ö–û–í
            this.emergencyGlobalSync(username, newPostId, discovererStreamId);
            
            return true; // –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        }
        
        return false; // –ü–æ—Å—Ç —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
    }

    // –¢–£–†–ë–û –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏
    async turboTimingControl(streamId) {
        const now = Date.now();
        const lastRequest = this.lastRequestTimes.get(streamId) || 0;
        const actualGap = now - lastRequest;
        
        // –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        if (actualGap < this.minGapBetweenRequests) {
            const waitTime = this.minGapBetweenRequests - actualGap;
            logger.info(`‚ö° Stream #${streamId}: Turbo delay ${waitTime}ms`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
        
        this.lastRequestTimes.set(streamId, Date.now());
    }

    // –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async monitorSingleProfile(streamId, username, userStreamIndex) {
        // –¢–£–†–ë–û –ö–û–ù–¢–†–û–õ–¨ –í–†–ï–ú–ï–ù–ò
        await this.turboTimingControl(streamId);
        
        const startTime = Date.now();

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            const connection = this.connectionPool.getConnectionForStream(streamId);
            
            if (!connection) {
                logger.warn(`‚ö†Ô∏è Stream #${streamId}: No connection - searching replacement...`);
                await this.ultraFastReplaceConnection(streamId);
                return;
            }

            // –ë–´–°–¢–†–´–ô –ó–ê–ü–†–û–° –ü–û–°–¢–û–í
            const result = await this.truthSocialAPI.getUserPostsWithConnection(username, 1, connection);
            const responseTime = Date.now() - startTime;

            if (result.success && result.posts.length > 0) {
                const latestPost = result.posts[0];
                
                // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–û–í–ò–ó–ù–´ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–µ—Ä–≤–æ–æ—Ç–∫—Ä—ã–≤–∞—Ç–µ–ª—è
                const isGloballyNewPost = this.updateGlobalLastPostId(username, latestPost.id, streamId);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ callback
                if (this.postCallback) {
                    this.postCallback({
                        type: isGloballyNewPost ? 'new_post' : 'check_result',
                        profile: username,
                        post: latestPost,
                        foundAt: new Date().toISOString(),
                        streamId: streamId,
                        userStreamIndex: userStreamIndex,
                        responseTime: responseTime,
                        method: result.method,
                        isNewPost: isGloballyNewPost,
                        turboMode: this.turboMode,
                        discoveredBy: isGloballyNewPost ? streamId : null
                    });
                }

                if (isGloballyNewPost) {
                    if (connection) connection.successCount++;
                    logger.info(`üéØ Stream #${streamId}: ‚ö° INSTANT NEW POST! "${latestPost.content.substring(0, 40)}..." (${responseTime}ms)`);
                    
                    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≤–µ–±
                    if (global.io) {
                        global.io.emit('log', {
                            level: 'success',
                            message: `‚ö° INSTANT: Stream #${streamId} found NEW POST in ${responseTime}ms!`
                        });
                    }
                } else {
                    if (connection) connection.successCount++;
                    logger.info(`‚úÖ Stream #${streamId}: Known post (${responseTime}ms)`);
                }
            } else {
                // –ë–´–°–¢–†–ê–Ø –ó–ê–ú–ï–ù–ê IP –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                if (connection) connection.errorCount++;
                
                const isTimeoutError = result.error && (
                    result.error.includes('ETIMEDOUT') ||
                    result.error.includes('timeout') ||
                    result.error.includes('ECONNRESET') ||
                    result.error.includes('RequestError')
                );

                if (connection && (connection.errorCount >= this.maxErrorsBeforeReplace || isTimeoutError)) {
                    logger.info(`‚ö° Stream #${streamId}: INSTANT IP replacement!`);
                    await this.ultraFastReplaceConnection(streamId);
                }
                
                if (this.postCallback) {
                    this.postCallback({
                        type: 'error',
                        profile: username,
                        foundAt: new Date().toISOString(),
                        streamId: streamId,
                        userStreamIndex: userStreamIndex,
                        responseTime: responseTime,
                        error: result.error
                    });
                }
            }

        } catch (error) {
            const responseTime = Date.now() - startTime;
            logger.error(`‚ùå Stream #${streamId}: Error (${responseTime}ms): ${error.message}`);
        }
    }

    // –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ–Ω–∞ IP
    async ultraFastReplaceConnection(streamId) {
        logger.info(`‚ö° Ultra-fast IP replacement for stream #${streamId}...`);
        
        try {
            const oldConnection = this.connectionPool.getConnectionForStream(streamId);
            if (oldConnection) {
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
                await this.truthSocialAPI.addToBlackList(oldConnection.proxy, 'instant_block');
                logger.info(`‚ö° Instant-blocked IP: ${oldConnection.proxy.split('@')[0]}@***`);
            }
            
            // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∑–∞–º–µ–Ω—ã
            const bestProxy = this.truthSocialAPI.getBestProxy();
            if (bestProxy) {
                const newAgent = this.truthSocialAPI.createProxyAgent(bestProxy);
                
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞
                this.connectionPool.connections.set(streamId % this.connectionPool.connections.size, {
                    proxy: bestProxy,
                    agent: newAgent,
                    lastUsed: Date.now(),
                    successCount: 0,
                    errorCount: 0,
                    isHealthy: true
                });
                
                logger.info(`‚ö° Stream #${streamId}: Ultra-fast replacement ‚Üí ${bestProxy.split('@')[0]}@***`);
                
                if (global.io) {
                    global.io.emit('log', {
                        level: 'success',
                        message: `‚ö° Stream #${streamId}: Ultra-fast IP switch completed`
                    });
                }
                
                return true;
            }
            
            return false;
            
        } catch (error) {
            logger.error(`‚ùå Ultra-fast replacement failed for stream #${streamId}: ${error.message}`);
            return false;
        }
    }

    // –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏
    async findMoreWorkingProxies(needed) {
        logger.info(`üîç Searching for ${needed} more working proxies...`);
        
        // –ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ–≥ –≤ –≤–µ–±
        if (global.io) {
            global.io.emit('log', {
                level: 'info',
                message: `üîç Searching ${needed} replacement IP for blocked streams...`
            });
        }
        
        const allProxies = this.truthSocialAPI.allProxies;
        const whiteList = this.truthSocialAPI.whiteList;
        const blackList = this.truthSocialAPI.blackList;
        
        const untestedProxies = allProxies.filter(proxy => 
            !whiteList.has(proxy) && !blackList.has(proxy)
        );
        
        let found = 0;
        const maxTests = Math.min(needed * 5, untestedProxies.length, 10);
        
        for (let i = 0; i < maxTests && found < needed; i++) {
            const proxy = untestedProxies[i];
            
            try {
                const agent = this.truthSocialAPI.createProxyAgent(proxy);
                const testUrl = 'https://truthsocial.com/api/v1/instance';
                
                const startTime = Date.now();
                
                const response = await Promise.race([
                    this.truthSocialAPI.makeRequest(testUrl, {
                        timeout: 3000, // –£—Å–∫–æ—Ä–∏–ª–∏ –¥–æ 3 —Å–µ–∫—É–Ω–¥
                        agent: agent
                    }),
                    new Promise((_, reject) => 
                        setTimeout(() => reject(new Error('Test timeout')), 3000)
                    )
                ]);
                
                const testTime = Date.now() - startTime;
                
                if (response.success) {
                    await this.truthSocialAPI.addToWhiteList(proxy, 'replacement_search');
                    logger.info(`‚úÖ Found replacement proxy: ${proxy.split('@')[0]}@*** (${testTime}ms)`);
                    found++;
                } else {
                    await this.truthSocialAPI.addToBlackList(proxy, 'replacement_test_failed');
                }
                
            } catch (error) {
                await this.truthSocialAPI.addToBlackList(proxy, 'replacement_test_error');
            }
            
            await new Promise(resolve => setTimeout(resolve, 500)); // –£—Å–∫–æ—Ä–∏–ª–∏ –ø–∞—É–∑—É
        }
        
        logger.info(`üéØ Found ${found} replacement working proxies`);
        return found;
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    getInstantDetectionStats() {
        const recentDetections = this.detectionHistory.filter(d => 
            Date.now() - d.detectedAt < 60000 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        );
        
        return {
            turboMode: this.turboMode,
            streamCount: this.streamCount,
            effectiveSpeed: Math.round(this.streamInterval / this.streamCount), // ms –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            recentDetections: recentDetections.length,
            detectionHistory: this.detectionHistory.slice(-5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π
        };
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    stopParallelMonitoring() {
        if (!this.isRunning) {
            return { success: false, error: 'Not running' };
        }

        logger.info(`üõë Stopping ${this.streams.size} TURBO monitoring streams...`);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for (const [streamId, intervalId] of this.streams) {
            clearInterval(intervalId);
            logger.info(`‚èπÔ∏è TURBO Stream #${streamId} stopped`);
        }

        this.streams.clear();
        this.lastPostIds.clear();
        
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.globalLastPostIds.clear();
        this.postUpdateLock.clear();
        this.detectionHistory.clear();
        
        this.isRunning = false;

        logger.info(`‚úÖ All TURBO monitoring streams stopped + global state cleared`);

        return {
            success: true,
            message: 'All TURBO streams stopped',
            stoppedStreams: this.streamCount
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç–æ–∫–æ–≤
    getStats() {
        return {
            isRunning: this.isRunning,
            activeStreams: this.streams.size,
            streamCount: this.streamCount,
            streamInterval: this.streamInterval,
            effectiveRate: this.isRunning ? Math.round(this.streamInterval / this.streamCount) : 0,
            profilesCount: this.profiles.length,
            totalRequestsPerMinute: this.isRunning ? Math.round((60000 / this.streamInterval) * this.streamCount * this.profiles.length) : 0,
            turboMode: this.turboMode,
            instantDetection: this.getInstantDetectionStats()
        };
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ç–æ–∫–æ–≤
    updateSettings(newStreamCount = null, newInterval = null) {
        if (newStreamCount && newStreamCount !== this.streamCount) {
            this.streamCount = newStreamCount;
            logger.info(`üîß Updated TURBO stream count to: ${this.streamCount}`);
        }

        if (newInterval && newInterval !== this.streamInterval) {
            this.streamInterval = newInterval;
            logger.info(`üîß Updated TURBO stream interval to: ${this.streamInterval}ms`);
        }

        return this.getStats();
    }
}

module.exports = ParallelMonitor;