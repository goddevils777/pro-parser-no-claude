// stealth-parser.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞
const logger = require('./logger');
const ProxyManager = require('./proxy-manager');
const AccountManager = require('./account-manager');
const PostTimingTracker = require('./post-timing-tracker');
const TabParser = require('./tab-parser');

class StealthParser {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        this.proxyManager = new ProxyManager('./port_list.txt');
        this.accountManager = new AccountManager(this.proxyManager);
        this.timingTracker = new PostTimingTracker();
        this.tabParser = new TabParser(this.proxyManager, this.timingTracker);
        
        // –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.activeIntervals = new Map(); // username -> interval ID
    }

    // =====================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // =====================================

    async init() {
        logger.info('Account management parser ready');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await this.accountManager.loadAuthorizedAccounts();
    }

    // =====================================
    // –ü–†–û–ö–°–ò –ú–ï–¢–û–î–´ –î–õ–Ø ACCOUNT MANAGER
    // =====================================

    async startAccountAuthorization(username) {
        return await this.accountManager.startAccountAuthorization(username);
    }

    async confirmAccountAuthorization(username) {
        return await this.accountManager.confirmAccountAuthorization(username);
    }

    async removeAccount(username) {
        return await this.accountManager.removeAccount(username);
    }

    getAccountsList() {
        return this.accountManager.getAccountsList();
    }

    // =====================================
    // –ü–†–û–ö–°–ò –ú–ï–¢–û–î–´ –î–õ–Ø TIMING TRACKER
    // =====================================

    getPostTimingStats() {
        return this.timingTracker.getPostTimingStats();
    }

    // =====================================
    // –ü–†–û–ö–°–ò –ú–ï–¢–û–î–´ –î–õ–Ø TAB PARSER
    // =====================================

    getTabsStats() {
        return this.tabParser.getTabsStats();
    }

    // =====================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú
    // =====================================

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    async startMonitoring(profiles) {
        // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        const authorizedAccounts = this.accountManager.getAuthorizedAccounts();
        const requiredAccounts = profiles.length * 3; // –í–†–ï–ú–ï–ù–ù–û: 3 –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤

        if (authorizedAccounts.length === 0) {
            const message = 'No authorized accounts available. Please authorize at least one account first.';
            
            if (global.io) {
                global.io.emit('log', {
                    level: 'error',
                    message: `‚ùå ${message}`
                });
            }
            
            throw new Error(message);
        }

        if (authorizedAccounts.length < requiredAccounts) {
            const message = `‚ùå INSUFFICIENT ACCOUNTS: Need ${requiredAccounts} accounts for ${profiles.length} profiles.\n\nüìã TEST MODE: 1 profile = 3 accounts (temporary for testing)\n\nüìä Currently have: ${authorizedAccounts.length} authorized accounts\nüìä Need to authorize: ${requiredAccounts - authorizedAccounts.length} more accounts\n\nüí° Please authorize more accounts before starting monitoring.`;
            
            logger.error(`‚ùå INSUFFICIENT ACCOUNTS: Need ${requiredAccounts} accounts for ${profiles.length} profiles (3 accounts per profile). Currently have ${authorizedAccounts.length} accounts.`);
            
            if (global.io) {
                global.io.emit('log', {
                    level: 'error',
                    message: `‚ùå INSUFFICIENT ACCOUNTS: Need ${requiredAccounts} accounts for ${profiles.length} profiles`
                });
                
                global.io.emit('log', {
                    level: 'info',
                    message: `üìã TEST MODE: 1 profile = 3 accounts (temporary for testing)`
                });
                
                global.io.emit('log', {
                    level: 'info',
                    message: `üìä Currently have: ${authorizedAccounts.length} authorized accounts`
                });
                
                global.io.emit('log', {
                    level: 'info', 
                    message: `üìä Need to authorize: ${requiredAccounts - authorizedAccounts.length} more accounts`
                });
                
                global.io.emit('log', {
                    level: 'warning',
                    message: `üí° Please authorize ${requiredAccounts - authorizedAccounts.length} more accounts before starting monitoring`
                });
            }
            
            throw new Error(message);
        }

        logger.info(`üöÄ Starting TEST monitoring ${profiles.length} profiles with ${authorizedAccounts.length} authorized accounts (3 browsers per profile, 2 tabs max)`);

        // –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º (–ø–æ 3 –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å)
        let accountIndex = 0;

        for (const profile of profiles) {
            try {
                // –ë–µ—Ä–µ–º 3 –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                const profileAccounts = authorizedAccounts.slice(accountIndex, accountIndex + 3);
                accountIndex += 3;

                if (profileAccounts.length < 3) {
                    logger.warn(`‚ö†Ô∏è Only ${profileAccounts.length} accounts available for @${profile.username}`);
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                const interval = this.tabParser.startParallelParsing(profile.username, profileAccounts);
                this.activeIntervals.set(profile.username, interval);

                logger.info(`‚úÖ Started TEST monitoring @${profile.username} with ${profileAccounts.length} accounts`);

                if (global.io) {
                    global.io.emit('log', {
                        level: 'success',
                        message: `‚úÖ @${profile.username} TEST mode: ${profileAccounts.length} browsers √ó 2 tabs max`
                    });
                }

            } catch (error) {
                logger.error(`‚ùå Failed to setup monitoring for @${profile.username}: ${error.message}`);
            }
        }

        if (global.io) {
            global.io.emit('log', {
                level: 'success',
                message: `üéØ TEST monitoring started: ${profiles.length} profiles with ${authorizedAccounts.length} accounts`
            });
            
            global.io.emit('log', {
                level: 'info',
                message: `‚ö° TEST Speed: 3 browsers per profile, 2 tabs max per browser, 5 second intervals`
            });
        }

        logger.info(`üéØ All profiles ready for TEST monitoring!`);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã)
    async stopMonitoring() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        for (const [username, interval] of this.activeIntervals) {
            clearInterval(interval);
            logger.info(`Stopped monitoring @${username}`);
        }
        this.activeIntervals.clear();

        logger.info('Monitoring stopped (authorized browsers remain open)');
        
        if (global.io) {
            global.io.emit('log', {
                level: 'info',
                message: 'Monitoring stopped (authorized browsers remain open)'
            });
        }
    }

    // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (–∑–∞–∫—Ä—ã–≤–∞–µ—Ç –í–°–ï –±—Ä–∞—É–∑–µ—Ä—ã)
    async stop() {
        await this.stopMonitoring();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã —á–µ—Ä–µ–∑ AccountManager
        for (const [username, account] of this.accountManager.authorizedAccounts) {
            if (account.browser) {
                try {
                    await account.browser.close();
                    logger.info(`Closed browser for account: ${username}`);
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
                
                account.status = 'offline';
                account.browser = null;
                account.context = null;
            }
        }

        logger.info('Parser stopped completely (all browsers closed)');
    }
}

module.exports = StealthParser;