// stealth-parser.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞
const logger = require('./logger');
const ProxyManager = require('./proxy-manager');
const AccountManager = require('./account-manager');
const PostTimingTracker = require('./post-timing-tracker');
const TabParser = require('./tab-parser');

class StealthParser {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        this.proxyManager = new ProxyManager('./port_list.txt');
        this.accountManager = new AccountManager(this.proxyManager);
        this.timingTracker = new PostTimingTracker();
        this.tabParser = new TabParser(this.proxyManager, this.timingTracker, this.accountManager);
        
        // –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.activeIntervals = new Map(); // username -> interval ID
    }

    // =====================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // =====================================

    async init() {
        logger.info('üîç STEALTH PARSER INIT STARTED');
        logger.info('Account management parser ready');
        
        // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
        logger.info('üîç About to call loadAuthorizedAccounts...');
        await this.accountManager.loadAuthorizedAccounts();
        logger.info('üîç loadAuthorizedAccounts completed');
    }

    // =====================================
    // –ü–†–û–ö–°–ò –ú–ï–¢–û–î–´ –î–õ–Ø ACCOUNT MANAGER
    // =====================================

    async startAccountAuthorization(username) {
        return await this.accountManager.startAccountAuthorization(username);
    }

    async confirmAccountAuthorization(username) {
        return await this.accountManager.confirmAccountAuthorization(username);
    }

    async removeAccount(username) {
        return await this.accountManager.removeAccount(username);
    }

    getAccountsList() {
        return this.accountManager.getAccountsList();
    }

    // =====================================
    // –ü–†–û–ö–°–ò –ú–ï–¢–û–î–´ –î–õ–Ø TIMING TRACKER
    // =====================================

    getPostTimingStats() {
        return this.timingTracker.getPostTimingStats();
    }

    // =====================================
    // –ü–†–û–ö–°–ò –ú–ï–¢–û–î–´ –î–õ–Ø TAB PARSER
    // =====================================

    getTabsStats() {
        return this.tabParser.getTabsStats();
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    async restoreOfflineAccountSessions() {
        logger.info(`üîÑ Checking for offline accounts to restore...`);
        
        let restored = 0;
        for (const [username, account] of this.accountManager.authorizedAccounts) {
            if (account.status === 'offline') {
                const sessionPath = `./data/sessions/${username}-session.json`;
                
                if (await require('fs-extra').pathExists(sessionPath)) {
                    try {
                        logger.info(`üîÑ Restoring session for ${username}...`);
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
                        const browserData = await this.accountManager.findWorkingIP();
                        
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                        await this.accountManager.restoreAccountSession(username, browserData.context, browserData.page);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account.browser = browserData.browser;
                        account.context = browserData.context;
                        account.page = browserData.page;
                        account.proxy = browserData.proxy;
                        account.proxyUrl = browserData.proxyUrl;
                        account.status = 'authorized';
                        
                        // –û—Ç–º–µ—á–∞–µ–º IP –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
                        if (browserData.proxyUrl) {
                            this.accountManager.proxyManager.markProxyAsUsed(browserData.proxyUrl);
                        }
                        
                        restored++;
                        logger.info(`‚úÖ Session restored for ${username} with IP: ${browserData.proxy?.server}`);
                        
                    } catch (error) {
                        logger.warn(`‚ùå Failed to restore session for ${username}: ${error.message}`);
                    }
                } else {
                    logger.info(`üí° No saved session found for ${username}`);
                }
            }
        }
        
        if (restored > 0) {
            logger.info(`üéØ Successfully restored ${restored} account sessions`);
        } else {
            logger.info(`üí° No offline accounts to restore`);
        }
        
        return restored;
    }

    // =====================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú
    // =====================================

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    async startMonitoring(profiles) {
        // –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ñ–î–ï–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        logger.info(`üîÑ Checking for offline accounts to restore...`);
        const restoredCount = await this.restoreOfflineAccountSessions();

        if (restoredCount > 0) {
            logger.info(`‚è≥ Waiting 5 seconds for restored sessions to stabilize...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
        }

        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
       const allAccounts = this.accountManager.getAccountsList();
const authorizedAccounts = allAccounts.filter(acc => acc.status === 'authorized' || acc.status === 'offline');

        if (global.io) {
            global.io.emit('log', {
                level: 'info',
                message: `üìä Found ${authorizedAccounts.length} authorized accounts ready for parsing`
            });
        }

        const requiredAccounts = profiles.length * 7; // 7 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å

        if (authorizedAccounts.length === 0) {
            const message = 'No accounts available (authorized or offline). Please add accounts first.';
            
            if (global.io) {
                global.io.emit('log', {
                    level: 'error',
                    message: `‚ùå ${message}`
                });
            }
            
            throw new Error(message);
        }

        if (authorizedAccounts.length < requiredAccounts) {
            const message = `‚ùå INSUFFICIENT ACCOUNTS: Need ${requiredAccounts} accounts for ${profiles.length} profiles.\n\nüìã Current: 1 profile = 7 accounts\n\nüìä Currently have: ${authorizedAccounts.length} authorized accounts\nüìä Need to authorize: ${requiredAccounts - authorizedAccounts.length} more accounts\n\nüí° Please authorize more accounts before starting monitoring.`;
            
            logger.error(`‚ùå INSUFFICIENT ACCOUNTS: Need ${requiredAccounts} accounts for ${profiles.length} profiles (7 accounts per profile). Currently have ${authorizedAccounts.length} accounts.`);
            
            if (global.io) {
                global.io.emit('log', {
                    level: 'error',
                    message: `‚ùå INSUFFICIENT ACCOUNTS: Need ${requiredAccounts} accounts for ${profiles.length} profiles`
                });
                
                global.io.emit('log', {
                    level: 'info',
                    message: `üìã Current: 1 profile = 7 accounts`
                });
                
                global.io.emit('log', {
                    level: 'info',
                    message: `üìä Currently have: ${authorizedAccounts.length} authorized accounts`
                });
                
                global.io.emit('log', {
                    level: 'info', 
                    message: `üìä Need to authorize: ${requiredAccounts - authorizedAccounts.length} more accounts`
                });
                
                global.io.emit('log', {
                    level: 'warning',
                    message: `üí° Please authorize ${requiredAccounts - authorizedAccounts.length} more accounts before starting monitoring`
                });
            }
            
            throw new Error(message);
        }

        logger.info(`üöÄ Starting monitoring ${profiles.length} profiles with ${authorizedAccounts.length} authorized accounts (7 browsers per profile, 2 tabs max)`);

        // –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º (–ø–æ 7 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å)
        let accountIndex = 0;

        for (const profile of profiles) {
            try {
                // –ë–µ—Ä–µ–º 7 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                const profileAccounts = authorizedAccounts.slice(accountIndex, accountIndex + 7);
                accountIndex += 7;

                if (profileAccounts.length < 7) {
                    const errorMessage = `‚ùå INSUFFICIENT ACCOUNTS for @${profile.username}: Need exactly 7 accounts, but only ${profileAccounts.length} provided. Skipping this profile.`;
                    logger.error(errorMessage);
                    
                    if (global.io) {
                        global.io.emit('log', {
                            level: 'error',
                            message: errorMessage
                        });
                    }
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                const interval = this.tabParser.startParallelParsing(profile.username, profileAccounts);
                this.activeIntervals.set(profile.username, interval);

                logger.info(`‚úÖ Started monitoring @${profile.username} with ${profileAccounts.length} accounts`);

                if (global.io) {
                    global.io.emit('log', {
                        level: 'success',
                        message: `‚úÖ @${profile.username}: ${profileAccounts.length} browsers √ó 2 tabs max`
                    });
                }

            } catch (error) {
                logger.error(`‚ùå Failed to setup monitoring for @${profile.username}: ${error.message}`);
            }
        }

        if (global.io) {
            global.io.emit('log', {
                level: 'success',
                message: `üéØ Monitoring started: ${profiles.length} profiles with ${authorizedAccounts.length} accounts`
            });
            
            global.io.emit('log', {
                level: 'info',
                message: `‚ö° Speed: 7 browsers per profile, 2 tabs max per browser, 5 second intervals`
            });
        }

        logger.info(`üéØ All profiles ready for monitoring!`);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã)
    async stopMonitoring() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        for (const [username, interval] of this.activeIntervals) {
            clearInterval(interval);
            logger.info(`Stopped monitoring @${username}`);
        }
        this.activeIntervals.clear();

        logger.info('Monitoring stopped (authorized browsers remain open)');
        
        if (global.io) {
            global.io.emit('log', {
                level: 'info',
                message: 'Monitoring stopped (authorized browsers remain open)'
            });
        }
    }

    // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (–∑–∞–∫—Ä—ã–≤–∞–µ—Ç –í–°–ï –±—Ä–∞—É–∑–µ—Ä—ã)
    async stop() {
        await this.stopMonitoring();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã —á–µ—Ä–µ–∑ AccountManager
        for (const [username, account] of this.accountManager.authorizedAccounts) {
            if (account.browser) {
                try {
                    await account.browser.close();
                    logger.info(`Closed browser for account: ${username}`);
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
                
                account.status = 'offline';
                account.browser = null;
                account.context = null;
            }
        }

        logger.info('Parser stopped completely (all browsers closed)');
    }
}

module.exports = StealthParser;