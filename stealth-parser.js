const { chromium } = require('playwright');
const axios = require('axios');
const config = require('./config');
const logger = require('./logger');
const ProxyManager = require('./proxy-manager');

class StealthParser {
    constructor() {
        this.browsers = [];
        this.sessions = new Map();
        this.token = 'BlChfq4xZWeEvTEPFYD1EmeY4iYLsitAiNh3VYP8g1o';
        this.lastPostIds = new Map();
        this.currentSessionIndex = 0; // –í–µ—Ä–Ω—É–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ
        this.proxyManager = new ProxyManager('./port_list.txt');
        
        // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—è–∑–∫–∏ IP –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        this.userProxyMap = new Map(); // username -> proxy
        this.userSessionMap = new Map(); // username -> session data
        this.activeIntervals = new Map(); // username -> interval ID
        this.failedAttempts = new Map(); // username -> attempts count

        this.browserPools = new Map(); // username -> –º–∞—Å—Å–∏–≤ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        this.poolSize = 3; // 3 –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    async init() {
        await this.createSessions();
        logger.info('Stealth Parser initialized with API sessions');
    }

async createSessions() {
  logger.info('Session system ready for parallel parsing');
}

async createUserSession(username) {
    let attempts = 0;
    const maxAttempts = 15; // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 15 –ø–æ–ø—ã—Ç–æ–∫
    
    while (attempts < maxAttempts) {
        try {
            const proxyUrl = this.proxyManager.getNextProxy();
            const proxy = proxyUrl ? this.proxyManager.parseProxy(proxyUrl) : null;
            
            logger.info(`Creating session for @${username} (attempt ${attempts + 1}/${maxAttempts}) with proxy ${proxy?.server || 'direct'}`);
            
            const browser = await chromium.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const context = await browser.newContext({
                userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport: { width: 1280, height: 720 },
                proxy: proxy
            });

            const page = await context.newPage();
            
            // –£–º–µ–Ω—å—à–∏–ª–∏ timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await page.goto('https://truthsocial.com', { 
                waitUntil: 'domcontentloaded',
                timeout: 10000 
            });

            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            const isBlocked = await page.evaluate(() => {
                return document.body.textContent.includes('you have been blocked') || 
                       document.body.textContent.includes('Unable to access') ||
                       document.body.textContent.includes('Access denied') ||
                       document.title.includes('blocked');
            });

            if (isBlocked) {
                await browser.close();
                logger.warn(`IP ${proxy?.server} is blocked, trying another...`);
                attempts++;
                continue;
            }

            // –£–º–µ–Ω—å—à–∏–ª–∏ timeout –¥–ª—è Cloudflare
            try {
                await page.waitForFunction(
                    () => !document.title.includes('Just a moment') && 
                          !document.body.innerHTML.includes('Checking your browser'),
                    { timeout: 10000 }
                );
            } catch (cfError) {
                // –ï—Å–ª–∏ Cloudflare –Ω–µ –ø—Ä–æ—à–ª–∏ –∑–∞ 10 —Å–µ–∫ - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π IP
                await browser.close();
                logger.warn(`Cloudflare timeout on ${proxy?.server}, trying another...`);
                attempts++;
                continue;
            }

            const cookies = await context.cookies();
            const userAgent = await page.evaluate(() => navigator.userAgent);
            
            this.userProxyMap.set(username, proxyUrl);
            
            this.userSessionMap.set(username, {
                cookies: cookies,
                userAgent: userAgent,
                proxy: proxy,
                isValid: true,
                createdAt: Date.now()
            });

            await browser.close();
            logger.info(`‚úÖ Session created for @${username} with ${cookies.length} cookies (attempt ${attempts + 1})`);
            return;
            
        } catch (error) {
            attempts++;
            logger.warn(`Attempt ${attempts} failed for @${username}: ${error.message.substring(0, 100)}`);
            
            if (attempts >= maxAttempts) {
                logger.error(`‚ùå Failed to create session for @${username} after ${maxAttempts} attempts`);
                this.failedAttempts.set(username, 10);
                return;
            }
        }
    }
}

async parseUserWithStableIP(username, keywords) {
    const userSession = this.userSessionMap.get(username);
    
    if (!userSession || !userSession.isValid) {
        const skipCount = this.skipCounts?.get(username) || 0;
        if (skipCount % 10 === 0) {
            logger.info(`üìã Waiting for valid session: @${username}`);
        }
        this.skipCounts = this.skipCounts || new Map();
        this.skipCounts.set(username, skipCount + 1);
        return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∏–∑ –ø—É–ª–∞
    const browserPool = this.browserPools.get(username);
    if (!browserPool) {
        return null;
    }
    
    const freeBrowser = browserPool.find(b => !b.isBusy);
    if (!freeBrowser) {
        if (global.io) {
            global.io.emit('log', {
                level: 'warning',
                message: `‚ö†Ô∏è @${username} all browsers busy, skipping...`
            });
        }
        return null;
    }
    
   freeBrowser.isBusy = true;
const startTime = Date.now();

// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API
try {
    const apiResult = await this.parseViaAPI(username);
    if (apiResult) {
        const parseTime = Date.now() - startTime;
        logger.info(`üöÄ @${username}: API success (${parseTime}ms)`);
        return apiResult;
    }
} catch (apiError) {
    logger.warn(`üöÄ @${username}: API failed, fallback to browser`);
}

try {
    logger.info(`üîç @${username}: Starting parse...`);
    
    const page = await freeBrowser.context.newPage();
    logger.info(`üìÑ @${username}: Page created`);

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await page.setExtraHTTPHeaders({
        'Authorization': `Bearer ${this.token}`,
        'X-Requested-With': 'XMLHttpRequest'
    });
    logger.info(`üîë @${username}: Authorization token added`);
    

    logger.info(`üö´ @${username}: Heavy resources blocked, JS allowed`);
    
    logger.info(`üåê @${username}: Navigating to page...`);
    await page.goto(`https://truthsocial.com/@${username}`, { 
        waitUntil: 'networkidle',
        timeout: 15000
    });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Truth Social –≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ JS)
    await page.waitForTimeout(8000);
// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏—Ç—å –≤–Ω–∏–∑ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
await page.evaluate(() => {
    window.scrollTo(0, 500);
});

// –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
await page.waitForLoadState('networkidle');
await page.waitForTimeout(5000);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
const isLoaded = await page.evaluate(() => {
    return document.readyState === 'complete' && 
           window.performance.timing.loadEventEnd > 0;
});
logger.info(`üìã @${username}: Page fully loaded: ${isLoaded}`);

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try {
    await page.waitForSelector('div[role="main"], main, [data-testid], .timeline', { 
        timeout: 15000 
    });
    logger.info(`‚öõÔ∏è @${username}: React app loaded`);
} catch (e) {
    logger.warn(`‚öõÔ∏è @${username}: React app not loaded, continuing anyway`);
}

await page.waitForTimeout(2000);
    

    logger.info(`‚úÖ @${username}: Page loaded`);
        if (global.sendLogUpdate) {
            global.sendLogUpdate({ level: 'info', message: `‚úÖ @${username}: Page loaded` });
        }
            
logger.info(`üîé @${username}: Extracting posts...`);
if (global.sendLogUpdate) {
    global.sendLogUpdate({ level: 'info', message: `üîé @${username}: Extracting posts...` });
}


// –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
await page.screenshot({ path: `debug-${username}.png`, fullPage: false });
logger.info(`üì∏ @${username}: Screenshot saved as debug-${username}.png`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã
const authStatus = await page.evaluate(() => {
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —á—Ç–æ –º—ã –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã
    const loginButton = document.querySelector('a[href="/auth/sign_in"], button:has-text("Log in")');
    const userMenu = document.querySelector('[data-testid="user-menu"], .user-avatar');
    
    return {
        hasLoginButton: !!loginButton,
        hasUserMenu: !!userMenu,
        currentUrl: window.location.href,
        bodyHasLogin: document.body.textContent.includes('Log in')
    };
});

logger.info(`üîê AUTH @${username}: ${JSON.stringify(authStatus)}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ rate limit
const isRateLimit = await page.locator('text=You\'re going too fast').count() > 0;
if (isRateLimit) {
    logger.warn(`‚è≥ @${username}: Rate limited, waiting 10 seconds...`);
    await page.waitForTimeout(10000);
    return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
}

// –ó–∞–∫—Ä—ã–≤–∞–µ–º cookie notice –µ—Å–ª–∏ –µ—Å—Ç—å
try {
    await page.locator('text=Accept').click({ timeout: 2000 });
    logger.info(`üç™ @${username}: Cookie notice accepted`);
} catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç
}

const post = await page.evaluate(() => {
    const timeElements = document.querySelectorAll('time');
    const foundTimeData = [];
    
    timeElements.forEach((timeEl, index) => {
        const timeTitle = timeEl.getAttribute('title');
        const timeText = timeEl.textContent?.trim();
        
        // –°–º–æ—Ç—Ä–∏–º —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ time —ç–ª–µ–º–µ–Ω—Ç–∞
        let nextElement = timeEl.nextElementSibling;
        let nextTexts = [];
        
        for (let j = 0; j < 3; j++) {
            if (nextElement) {
                const text = nextElement.textContent?.trim();
                if (text && text.length > 5) {
                    nextTexts.push(text.substring(0, 100));
                }
                nextElement = nextElement.nextElementSibling;
            }
        }
        
        foundTimeData.push({
            index: index,
            title: timeTitle,
            text: timeText,
            nextTexts: nextTexts
        });
    });
    
    return {
        totalTimeElements: timeElements.length,
        timeData: foundTimeData
    };
});

logger.info(`üïê TIME @${username}: Found ${post.totalTimeElements} time elements`);
post.timeData.forEach(time => {
    logger.info(`‚è∞ Time${time.index}: "${time.text}" (${time.title}) -> next: ${JSON.stringify(time.nextTexts)}`);
});

if (post) {
    logger.info(`üéØ FOUND POST BY TIME @${username}: ${post.content.substring(0, 100)}`);
} else {
    logger.info(`üì≠ No posts found by time @${username}`);
}





// –î–æ–±–∞–≤—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ page.evaluate()
if (post && post.debug) {
    logger.info(`üîç PAGE INFO @${username}: ${JSON.stringify(post.pageInfo)}`);
    logger.info(`üîç TEXT ELEMENTS @${username}: ${JSON.stringify(post.textElements.slice(0, 3))}`);
}

// –û—Ç–¥–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º HTML
const pageHTML = await page.content();
logger.info(`üîç HTML @${username}: ${pageHTML.substring(0, 2000)}`);

    
    await page.close();
    const parseTime = Date.now() - startTime;

        if (post) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏–ª–∏ —É–∂–µ –≤–∏–¥–µ–ª–∏
            const lastPostId = this.lastPostIds.get(username);
            
            if (lastPostId !== post.id && lastPostId !== post.content) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
                this.lastPostIds.set(username, post.content);
                
                logger.info(`üéØ NEW POST @${username}: ${post.content.substring(0, 100)}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
                this.sendToInterface(post, username, parseTime);
                
                return post;
            } else {
                logger.info(`üîÑ Same post @${username}: already seen`);
            }
        } else {
            logger.info(`üì≠ No posts found @${username}`);
        }

    
        
        if (post && this.shouldNotify(post, keywords)) {
            logger.info(`üéØ NEW POST @${username} (${parseTime}ms)`);
            this.sendToInterface(post, username, parseTime);
        } else {


            const successCount = this.successCounts?.get(username) || 0;
            if (successCount % 5 === 0) {
                logger.info(`‚úÖ Monitoring @${username} (${parseTime}ms)`);
            }
            this.successCounts = this.successCounts || new Map();
            this.successCounts.set(username, successCount + 1);
        }
        
        this.failedAttempts.set(username, 0);
        return post;
        
    } catch (error) {
        throw error;
    } finally {
        freeBrowser.isBusy = false; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    }
}

sendToInterface(post, username, parseTime) {
    if (global.io) {
        global.io.emit('new-post', {
            username,
            content: post.content,
            timestamp: post.timestamp,
            url: post.url,
            parseTime: parseTime // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        });
        
        global.io.emit('log', {
            level: 'success',
            message: `üìç @${username} (${parseTime}ms): ${post.content.substring(0, 50)}...`
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        global.io.emit('performance', {
            username: username,
            parseTime: parseTime,
            timestamp: Date.now()
        });
    }
}

async switchUserProxy(username) {
    logger.warn(`Switching proxy for @${username} after repeated failures`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    const oldSession = this.userSessionMap.get(username);
    if (oldSession && oldSession.browser) {
        try {
            await oldSession.browser.close();
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        }
        oldSession.browser = null;
        oldSession.context = null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
    const newProxy = this.proxyManager.getNextProxy();
    this.userProxyMap.set(username, newProxy);
    
    // –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é
    if (oldSession) {
        oldSession.isValid = false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    await this.createUserSession(username);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.failedAttempts.set(username, 0);
    
    if (global.io) {
        global.io.emit('log', {
            level: 'warning',
            message: `üîÑ Switched proxy for @${username} due to repeated failures`
        });
    }
}

async startParallelParsing(profiles) {
    this.activeIntervals = new Map();
    
    logger.info(`Creating sessions for ${profiles.length} profiles...`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (global.io) {
        global.io.emit('log', {
            level: 'info',
            message: `üîÑ Creating sessions for ${profiles.length} profiles...`
        });
    }
    
    for (const profile of profiles) {
        // –ù–∞–∑–Ω–∞—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!this.userProxyMap.has(profile.username)) {
            const proxy = this.proxyManager.getNextProxy();
            this.userProxyMap.set(profile.username, proxy);
            
            logger.info(`Assigned proxy to @${profile.username}: ${this.proxyManager.parseProxy(proxy)?.server}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (global.io) {
                global.io.emit('log', {
                    level: 'info',
                    message: `üì° Setting up @${profile.username}...`
                });
            }
        }
        
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ñ–î–ï–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await this.createUserSession(profile.username);

        await this.createBrowserPool(profile.username, this.userSessionMap.get(profile.username));
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
        if (global.io) {
            global.io.emit('log', {
                level: 'success',
                message: `‚úÖ Session ready for @${profile.username}`
            });
        }
    }
    
    logger.info('All user sessions created, starting monitoring...');
    
    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    for (const profile of profiles) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å 300ms –¥–æ 2000ms (2 —Å–µ–∫—É–Ω–¥—ã)
        const interval = setInterval(async () => {
            await this.parseWithRetry(profile.username, profile.keywords);
        }, 5000);
        
        this.activeIntervals.set(profile.username, interval);
        logger.info(`Started monitoring @${profile.username} every 0.5s with ${this.poolSize} browsers`);
    }
}

async parseWithRetry(username, keywords, maxRetries = 3) {
    let attempts = 0;
    
    while (attempts < maxRetries) {
        try {
            const result = await this.parseUserWithStableIP(username, keywords);
            return result;
            
        } catch (error) {
            attempts++;
            
            if (attempts === maxRetries) {
                logger.warn(`@${username}: ${maxRetries} failures, switching proxy...`);
                await this.switchUserProxy(username);
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø—Ä–æ–∫—Å–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥
                await new Promise(resolve => setTimeout(resolve, 30000));
                return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª
            }
            
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    return null;
}

shouldNotify(post, keywords) {
    if (!keywords || keywords.length === 0) return true;
    
    const content = post.content.toLowerCase();
    return keywords.some(keyword => content.includes(keyword.toLowerCase()));
}

stopProfileMonitoring(username) {
    const interval = this.activeIntervals.get(username);
    if (interval) {
        clearInterval(interval);
        this.activeIntervals.delete(username);
        
        if (global.io) {
            global.io.emit('log', {
                level: 'error',
                message: `Stopped monitoring @${username} due to repeated IP failures`
            });
        }
    }
}

async createBrowserPool(username, userSession) {
    const browsers = [];
    
    for (let i = 0; i < this.poolSize; i++) {
        try {
            const browser = await chromium.launch({ 
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const context = await browser.newContext({
                userAgent: userSession.userAgent,
                proxy: userSession.proxy
            });
            
            await context.addCookies(userSession.cookies);
            
            browsers.push({ browser, context, isBusy: false });
            
            if (global.io) {
                global.io.emit('log', {
                    level: 'info',
                    message: `üîß Created browser ${i+1}/${this.poolSize} for @${username}`
                });
            }
            
        } catch (error) {
            logger.error(`Failed to create browser ${i+1} for ${username}: ${error.message}`);
        }
    }
    
    this.browserPools.set(username, browsers);
    logger.info(`Browser pool ready for @${username}: ${browsers.length} browsers`);
}

async parseViaAPI(username) {
    try {
        const response = await axios.get(`https://truthsocial.com/api/v1/accounts/${username}/statuses`, {
            headers: {
                'Authorization': `Bearer ${this.token}`,
                'User-Agent': config.parser.userAgent
            },
            timeout: 5000
        });
        
        if (response.data && response.data.length > 0) {
            const latestPost = response.data[0];
            return {
                id: latestPost.id,
                content: latestPost.content,
                timestamp: latestPost.created_at,
                url: latestPost.url
            };
        }
        
        return null;
    } catch (error) {
        throw error;
    }
}



async stop() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    for (const [username, interval] of this.activeIntervals) {
        clearInterval(interval);
        logger.info(`Stopped monitoring @${username}`);
    }
    this.activeIntervals.clear();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const [username, session] of this.userSessionMap) {
        if (session.browser) {
            try {
                await session.browser.close();
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            }
        }
    }
    
    await this.close();
    logger.info('Parser stopped completely');
}



async close() {
    this.sessions.clear();
    logger.info('Stealth Parser closed, sessions cleared');
}
}

module.exports = StealthParser;