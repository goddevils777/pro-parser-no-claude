// app-api.js - Truth Social Parser API Version
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const fs = require('fs-extra');
const path = require('path');
const winston = require('winston');
const axios = require('axios');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å—ã
const TruthSocialAPI = require('./truth-social-api');
const BrowserManager = require('./browser-manager');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Truth Social API –∏ BrowserManager
const truthSocialAPI = new TruthSocialAPI();
const browserManager = new BrowserManager(truthSocialAPI);


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const ParallelMonitor = require('./parallel-monitor');
const StableConnectionPool = require('./stable-connection-pool');
let parallelMonitor = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
connectionPool = new StableConnectionPool(truthSocialAPI);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å callback
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å callback –∏ –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
parallelMonitor = new ParallelMonitor(truthSocialAPI, (postData) => {
    handleNewPost(postData);
}, connectionPool);



// –¢—Ä–µ–∫–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –≤—ã–¥–∞—á–∞–º–∏
let lastOutputTime = 0;

function getTimeSinceLastOutput() {
    const now = Date.now();
    const interval = lastOutputTime ? now - lastOutputTime : 0;
    lastOutputTime = now;
    return interval;
}
// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –ø–æ—Ç–æ–∫–æ–≤
function handleNewPost(postData) {
    const responseTime = postData.responseTime;
    const streamId = postData.streamId;
    const profile = postData.profile;
    const timeSinceLastOutput = getTimeSinceLastOutput();
    
    console.log(`üîß DEBUG: Gap time: ${timeSinceLastOutput}ms`); // ‚Üê –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Gap —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–µ–±
    io.emit('gapUpdate', { gapTime: timeSinceLastOutput });
    
    if (postData.type === 'new_post') {
        // –ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞–π–¥–µ–Ω
        parserStats.postsFound++;
        
        const postEntry = {
            username: profile,
            content: postData.post.content,
            createdAt: postData.post.createdAt,
            foundAt: postData.foundAt,
            streamId: streamId,
            postId: postData.post.id,
            responseTime: responseTime
        };
        
        recentPosts.unshift(postEntry);
        
        if (recentPosts.length > 100) {
            recentPosts = recentPosts.slice(0, 100);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        io.emit('post', {
            author: profile,
            content: postData.post.content,
            foundAt: postData.foundAt,
            streamId: streamId,
            responseTime: responseTime,
            source: `üéØ NEW POST - Stream #${streamId} (${responseTime}ms) | Gap: ${timeSinceLastOutput}ms`
        });
        
        addLogToUI({
            level: 'success',
            message: `üéØ NEW POST @${profile} (Stream #${streamId}, ${responseTime}ms) | Gap: ${timeSinceLastOutput}ms`
        });
        
    } else if (postData.type === 'check_result') {
        // –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π
        io.emit('post', {
            author: profile,
            content: postData.post.content,
            foundAt: postData.foundAt,
            streamId: streamId,
            responseTime: responseTime,
            source: `‚úÖ Last post - Stream #${streamId} (${responseTime}ms) | Gap: ${timeSinceLastOutput}ms`
        });
        
        addLogToUI({
            level: 'info',
            message: `‚úÖ Stream #${streamId}: @${profile} checked (${responseTime}ms) | Gap: ${timeSinceLastOutput}ms`
        });
        
    } else if (postData.type === 'error') {
        // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
        io.emit('post', {
            author: profile,
            content: `‚ùå Error: ${postData.error}`,
            foundAt: postData.foundAt,
            streamId: streamId,
            responseTime: responseTime,
            source: `‚ùå Error - Stream #${streamId} (${responseTime}ms) | Gap: ${timeSinceLastOutput}ms`
        });
        
        addLogToUI({
            level: 'error',
            message: `‚ùå Stream #${streamId}: @${profile} error (${responseTime}ms) | Gap: ${timeSinceLastOutput}ms`
        });
    }
    
    parserStats.lastActivity = new Date().toISOString();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BrowserManager –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
(async () => {
    try {
        await browserManager.init();
        logger.info('‚úÖ BrowserManager initialized successfully');
    } catch (error) {
        logger.error('‚ùå BrowserManager initialization failed:', error.message);
    }
})();



const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// –î–µ–ª–∞–µ–º io –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
global.io = io;

// Middleware
app.use(express.json());
app.use(express.static('public'));
app.set('view engine', 'ejs');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let parserStats = {
    running: false,
    profilesCount: 0,
    accountsCount: 0,
    postsFound: 0,
    lastActivity: null
};

let parseTimeStats = {};
let webLogs = [];
let recentPosts = [];
let monitoringIntervals = new Map(); // username -> intervalId


// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞
async function saveAuthToken(token) {
    try {
        await fs.ensureDir('./data');
        await fs.writeJson('./data/auth-token.json', {
            token: token,
            savedAt: new Date().toISOString()
        });
        logger.info('üíæ Auth token saved to file');
    } catch (error) {
        logger.error(`Error saving auth token: ${error.message}`);
    }
}

async function loadAuthToken() {
    try {
        const tokenFile = './data/auth-token.json';
        if (await fs.pathExists(tokenFile)) {
            const tokenData = await fs.readJson(tokenFile);
            if (tokenData.token) {
                truthSocialAPI.authToken = tokenData.token;
                truthSocialAPI.isAuthorized = true;

                logger.info(`üé´ Auth token loaded from file: ${tokenData.token.substring(0, 20)}...`);
                addLogToUI({
                    level: 'success',
                    message: `üé´ Auth token loaded from previous session`
                });
                return true;
            }
        }
        return false;
    } catch (error) {
        logger.error(`Error loading auth token: ${error.message}`);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
(async () => {
    await loadAuthToken();
})();


// Logger setup
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.printf(({ timestamp, level, message }) => {
            return `${timestamp} [${level.toUpperCase()}] ${message}`;
        })
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: './logs/combined.log' })
    ]
});




// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TokenManager (–£–ë–†–ê–¢–¨ –û–¢–°–Æ–î–ê)
const TokenManager = require('./token-manager');
let tokenManager = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TokenManager (–£–ë–†–ê–¢–¨ –û–¢–°–Æ–î–ê)
(async () => {
    try {
        logger.info('üé´ Initializing TokenManager...');
        tokenManager = new TokenManager();
        await tokenManager.init();
        global.tokenManager = tokenManager;
        logger.info(`‚úÖ TokenManager initialized successfully with ${tokenManager.tokens.length} tokens`);
    } catch (error) {
        logger.error('‚ùå TokenManager initialization failed:', error.message);
        logger.error('Stack trace:', error.stack);
    }
})();

// === API ENDPOINTS ===

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.render('index', { 
        title: 'Truth Social Parser - API Version',
        version: 'API'
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
app.get('/api/profiles', async (req, res) => {
    try {
        const profilesPath = './data/profiles.json';
        if (await fs.pathExists(profilesPath)) {
            const profiles = await fs.readJson(profilesPath);
            res.json(profiles);
        } else {
            res.json([]);
        }
    } catch (error) {
        res.json([]);
    }
});

// API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
app.post('/api/profiles', async (req, res) => {
    try {
        const { username, keywords } = req.body;
        
        if (!username) {
            return res.json({ success: false, error: 'Username required' });
        }

        const profilesPath = './data/profiles.json';
        let profiles = [];
        
        if (await fs.pathExists(profilesPath)) {
            profiles = await fs.readJson(profilesPath);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if (profiles.find(p => p.username === username)) {
            return res.json({ success: false, error: 'Profile already exists' });
        }

        profiles.push({
            username: username.replace('@', ''),
            keywords: keywords || '',
            addedAt: new Date().toISOString(),
            status: 'active'
        });

        await fs.ensureDir('./data');
        await fs.writeJson(profilesPath, profiles);
        
        logger.info(`üìù Profile added: @${username}`);
        res.json({ success: true, message: 'Profile added successfully' });
        
    } catch (error) {
        logger.error('Error adding profile:', error);
        res.json({ success: false, error: error.message });
    }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
app.delete('/api/profiles/:username', async (req, res) => {
    try {
        const { username } = req.params;
        const profilesPath = './data/profiles.json';
        
        if (await fs.pathExists(profilesPath)) {
            let profiles = await fs.readJson(profilesPath);
            profiles = profiles.filter(p => p.username !== username);
            await fs.writeJson(profilesPath, profiles);
        }
        
        logger.info(`üóëÔ∏è Profile removed: @${username}`);
        res.json({ success: true });
        
    } catch (error) {
        res.json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
app.get('/api/accounts', (req, res) => {
    logger.info('üîç API /api/accounts called - returning empty array (API mode)');
    res.json([]);
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
app.get('/api/posts', async (req, res) => {
    try {
        const postsPath = './data/recent-posts.json';
        if (await fs.pathExists(postsPath)) {
            const posts = await fs.readJson(postsPath);
            res.json(posts.slice(0, 50)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–æ—Å—Ç–æ–≤
        } else {
            res.json([]);
        }
    } catch (error) {
        res.json([]);
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
app.get('/api/logs', (req, res) => {
    res.json(webLogs.slice(-100)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ª–æ–≥–æ–≤
});

// API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
app.post('/api/logs/clear', (req, res) => {
    webLogs = [];
    logger.info('üóëÔ∏è Logs cleared');
    res.json({ success: true });
});

// API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤
app.post('/api/posts/clear', (req, res) => {
    recentPosts = [];
    logger.info('üóëÔ∏è Posts cleared');
    res.json({ success: true });
});

// API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', (req, res) => {
    res.json({
        ...parserStats,
        version: 'API',
        mode: 'API-only (browsers disabled)'
    });
});

// API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Bearer —Ç–æ–∫–µ–Ω–∞
app.post('/api/auth/token', async (req, res) => {
    try {
        const { token } = req.body;
        
        if (!token) {
            return res.json({ success: false, error: 'Token required' });
        }
        
if (token.length < 30) {
    return res.json({ success: false, error: 'Token too short (minimum 30 characters)' });
}
        
        logger.info(`üé´ Setting Bearer token: ${token.substring(0, 20)}...`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        truthSocialAPI.authToken = token;
        truthSocialAPI.isAuthorized = true;
        await saveAuthToken(token);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const testResult = await truthSocialAPI.testConnection();
        
        if (testResult.success) {
            logger.info(`‚úÖ Bearer token is valid and working`);
            addLogToUI({
                level: 'success',
                message: `‚úÖ Bearer token set successfully and tested`
            });
            
            res.json({ 
                success: true, 
                message: 'Token set and verified successfully',
                isAuthorized: true,
                stats: testResult.stats
            });
        } else {
            logger.warn(`‚ö†Ô∏è Bearer token set but test failed: ${testResult.message}`);
            addLogToUI({
                level: 'warning',
                message: `‚ö†Ô∏è Token set but verification failed: ${testResult.message}`
            });
            
            res.json({ 
                success: true, 
                message: 'Token set (verification failed but will try to use)',
                isAuthorized: true,
                warning: testResult.message
            });
        }
        
    } catch (error) {
        logger.error('Token setup error:', error.message);
        res.json({ 
            success: false, 
            error: error.message 
        });
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/api/auth/status', (req, res) => {
    res.json({
        isAuthorized: truthSocialAPI.isAuthorized,
        hasToken: !!truthSocialAPI.authToken,
        stats: truthSocialAPI.getStats()
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
app.get('/api/auth/current-token', (req, res) => {
    if (truthSocialAPI.isAuthorized && truthSocialAPI.authToken) {
        res.json({
            success: true,
            token: truthSocialAPI.authToken,
            hasToken: true
        });
    } else {
        res.json({
            success: false,
            token: null,
            hasToken: false
        });
    }
});


app.post('/api/test-truth-social', async (req, res) => {
    try {
        logger.info(`üß™ Testing simple HTTP connection...`);
        
        // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏ SSL
        const startTime = Date.now();
        
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–∞–π—Ç
            const response = await axios.get('http://httpbin.org/ip', {
                timeout: 5000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });
            
            const responseTime = Date.now() - startTime;
            
            if (response.status === 200) {
                const ip = response.data.origin || 'unknown';
                logger.info(`‚úÖ Connection test successful: IP ${ip}, ${responseTime}ms`);
                
                res.json({ 
                    success: true, 
                    message: `Connection working! Your IP: ${ip}`,
                    details: {
                        responseTime: responseTime,
                        ip: ip,
                        status: 'working'
                    }
                });
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
            
        } catch (httpError) {
            logger.warn(`HTTP test failed: ${httpError.message}`);
            
            // Fallback - –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DNS
            const dns = require('dns');
            const dnsStartTime = Date.now();
            
            dns.lookup('google.com', (err, address) => {
                const dnsTime = Date.now() - dnsStartTime;
                
                if (!err) {
                    logger.info(`‚úÖ DNS test successful: ${address}, ${dnsTime}ms`);
                    res.json({ 
                        success: true, 
                        message: `DNS working! Google resolves to ${address}`,
                        details: {
                            responseTime: dnsTime,
                            ip: address,
                            status: 'dns_only'
                        }
                    });
                } else {
                    logger.error(`‚ùå DNS test failed: ${err.message}`);
                    res.json({ 
                        success: false, 
                        error: `No internet connection: ${err.message}`,
                        details: {
                            status: 'failed'
                        }
                    });
                }
            });
        }
        
    } catch (error) {
        logger.error('Connection test error:', error.message);
        res.json({ 
            success: false, 
            error: `Connection test failed: ${error.message}`,
            details: {
                status: 'error'
            }
        });
    }
});

// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app.post('/api/monitoring/start', async (req, res) => {
    try {
        const profilesPath = './data/profiles.json';
        
        if (!(await fs.pathExists(profilesPath))) {
            return res.json({ success: false, error: 'No profiles to monitor' });
        }
        
        const profiles = await fs.readJson(profilesPath);
        
        if (profiles.length === 0) {
            return res.json({ success: false, error: 'No profiles to monitor' });
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        for (const [username, intervalId] of monitoringIntervals) {
            clearInterval(intervalId);
        }
        monitoringIntervals.clear();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        const result = await parallelMonitor.startParallelMonitoring(profiles);
        
        if (result.success) {
            parserStats.running = true;
            parserStats.profilesCount = profiles.length;
            parserStats.lastActivity = new Date().toISOString();
            
            logger.info(`üöÄ Started parallel monitoring: ${result.streamCount} streams`);
            addLogToUI({
                level: 'info',
                message: `üöÄ Started ${result.streamCount} parallel streams for ${profiles.length} profiles`
            });
            
            updateStats({ running: true, profilesCount: profiles.length });
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
io.emit('profilesCount', profiles.length);
        }
        
        res.json(result);
        
    } catch (error) {
        logger.error('Error starting parallel monitoring:', error);
        res.json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app.post('/api/monitoring/stop', async (req, res) => {
    try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        const result = parallelMonitor.stopParallelMonitoring();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        for (const [username, intervalId] of monitoringIntervals) {
            clearInterval(intervalId);
        }
        monitoringIntervals.clear();
        
        parserStats.running = false;
        parserStats.lastActivity = new Date().toISOString();
        
        if (result.success) {
            logger.info(`üõë Stopped parallel monitoring: ${result.stoppedStreams} streams`);
            addLogToUI({
                level: 'info',
                message: `üõë Stopped ${result.stoppedStreams} parallel streams`
            });
        }
        
        updateStats({ running: false });
        
        res.json(result);
        
    } catch (error) {
        logger.error('Error stopping parallel monitoring:', error);
        res.json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app.get('/api/monitoring/stats', (req, res) => {
    try {
        const parallelStats = parallelMonitor.getStats();
        
        res.json({
            success: true,
            stats: {
                ...parserStats,
                parallel: parallelStats
            }
        });
        
    } catch (error) {
        logger.error('Error getting monitoring stats:', error);
        res.json({ success: false, error: error.message });
    }
});


// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –∏ —Å–º–µ–Ω–æ–π IP
async function monitorProfileWithRetry(profile, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            addLogToUI({
                level: 'info',
                message: `üîç Checking @${profile.username} (attempt ${attempt}/${maxRetries})...`
            });
            
            const startTime = Date.now();
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ Truth Social API
            const result = await truthSocialAPI.getUserPosts(profile.username, 1);
            const responseTime = Date.now() - startTime;
            
            if (result.success && result.posts.length > 0) {
                const latestPost = result.posts[0];
                
                addLogToUI({
                    level: 'success',
                    message: `‚úÖ @${profile.username} checked successfully (${responseTime}ms)`
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
                const postData = {
                    id: latestPost.id,
                    content: latestPost.content,
                    createdAt: latestPost.createdAt,
                    author: profile.username,
                    profile: profile.username,
                    keywords: profile.keywords,
                    foundAt: new Date().toISOString(),
                    method: result.method || 'api',
                    url: latestPost.url
                };
                
                addPostToUI(postData);
                await savePost(postData);
                
                parserStats.postsFound++;
                parserStats.lastActivity = new Date().toISOString();
                updateStats({ postsFound: parserStats.postsFound });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
                const postTime = new Date(latestPost.createdAt);
                const now = new Date();
                const diffMinutes = Math.round((now - postTime) / (1000 * 60));
                
                addLogToUI({
                    level: 'info',
                    message: `üìÑ Latest post from @${profile.username} (${diffMinutes} min ago): "${latestPost.content.substring(0, 100)}..."`
                });
                
                return true; // –£—Å–ø–µ—Ö
                
            } else if (result.error && result.error.includes('cloudflare')) {
                // Cloudflare –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π IP
                addLogToUI({
                    level: 'warning',
                    message: `üõ°Ô∏è Cloudflare blocked IP for @${profile.username} - trying next IP...`
                });
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
                truthSocialAPI.currentProxyIndex = (truthSocialAPI.currentProxyIndex + 1) % (truthSocialAPI.proxies.length || 1);
                
                continue; // –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Å –Ω–æ–≤—ã–º IP
                
            } else {
                addLogToUI({
                    level: 'warning',
                    message: `‚ö†Ô∏è @${profile.username} no posts found: ${result.error || 'empty feed'} (${responseTime}ms)`
                });
                
                return false;
            }
            
        } catch (error) {
            addLogToUI({
                level: 'error',
                message: `‚ùå Attempt ${attempt} failed for @${profile.username}: ${error.message}`
            });
            
            if (attempt < maxRetries) {
                addLogToUI({
                    level: 'info',
                    message: `üîÑ Switching IP and retrying @${profile.username}...`
                });
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
                truthSocialAPI.currentProxyIndex = (truthSocialAPI.currentProxyIndex + 1) % (truthSocialAPI.proxies.length || 1);
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
    }
    
    return false; // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Ñ–∞–π–ª
async function savePost(postData) {
    try {
        const postsPath = './data/recent-posts.json';
        let posts = [];
        
        if (await fs.pathExists(postsPath)) {
            posts = await fs.readJson(postsPath);
        }
        
        posts.unshift(postData);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if (posts.length > 1000) {
            posts = posts.slice(0, 1000);
        }
        
        await fs.ensureDir('./data');
        await fs.writeJson(postsPath, posts);
        
    } catch (error) {
        logger.error('Error saving post:', error);
    }
}

// === WEBSOCKET –û–ë–†–ê–ë–û–¢–ö–ê ===

io.on('connection', (socket) => {
    console.log('Client connected');
    
    socket.emit('stats', parserStats);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    console.log(`Sending ${webLogs.length} saved logs to client`);
    webLogs.forEach(log => {
        socket.emit('log', log);
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    console.log(`Sending ${recentPosts.length} saved posts to client`);
    recentPosts.forEach(post => {
        socket.emit('post', post);
    });

    socket.on('disconnect', () => {
        console.log('Client disconnected');
    });

    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    socket.on('clear-logs', () => {
        webLogs = [];
        io.emit('logs-cleared');
        logger.info('üóëÔ∏è Logs cleared by client');
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤
    socket.on('clear-posts', () => {
        recentPosts = [];
        io.emit('posts-cleared');
        logger.info('üóëÔ∏è Posts cleared by client');
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞
function addLogToUI(logData) {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = {
        ...logData,
        timestamp: timestamp
    };
    
    webLogs.push(logEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
    if (webLogs.length > 500) {
        webLogs = webLogs.slice(-500);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('log', logEntry);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
function addPostToUI(postData) {
    const postEntry = {
        ...postData,
        foundAt: new Date().toISOString()
    };
    
    recentPosts.unshift(postEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
    if (recentPosts.length > 100) {
        recentPosts = recentPosts.slice(0, 100);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('post', postEntry);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(newStats) {
    parserStats = { ...parserStats, ...newStats };
    io.emit('stats', parserStats);
}




// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.post('/api/auth/start-browser', async (req, res) => {
    try {
        logger.info('üåê Starting browser authorization...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π IP (10 –ø–æ–ø—ã—Ç–∫–∏)
        const result = await browserManager.startBrowser(10);
        
        if (result.success) {
            addLogToUI({
                level: 'info',
                message: 'üåê Browser opened for manual authorization'
            });
        } else {
            addLogToUI({
                level: 'error',
                message: `‚ùå Browser start failed: ${result.error}`
            });
        }
        
        res.json(result);
        
    } catch (error) {
        logger.error('Browser start error:', error);
        res.json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
app.post('/api/auth/close-browser', async (req, res) => {
    try {
        await browserManager.closeBrowser();
        
        addLogToUI({
            level: 'info',
            message: 'üîí Browser closed'
        });
        
        res.json({ success: true, message: 'Browser closed' });
        
    } catch (error) {
        logger.error('Browser close error:', error);
        res.json({ success: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–∞—É–∑–µ—Ä–∞
app.get('/api/auth/browser-status', (req, res) => {
    const status = browserManager.getStatus();
    res.json(status);
});


// API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
app.post('/api/auth/extract-token', async (req, res) => {
    try {
        logger.info('üîç Extracting token from browser...');
        const result = await browserManager.extractToken();
        
        if (result.success && result.token) {
            // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ TruthSocialAPI
            truthSocialAPI.authToken = result.token;
            truthSocialAPI.isAuthorized = true;
            
            logger.info(`üé´ Token extracted and saved: ${result.token.substring(0, 20)}...`);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            try {
                const testResult = await truthSocialAPI.testConnection();
                if (testResult.success) {
                    logger.info(`‚úÖ Token verified and working`);
                } else {
                    logger.warn(`‚ö†Ô∏è Token saved but verification failed: ${testResult.message}`);
                }
            } catch (testError) {
                logger.warn(`‚ö†Ô∏è Token saved but test failed: ${testError.message}`);
            }
            
            addLogToUI({
                level: 'success',
                message: `üé´ Token extracted and saved successfully: ${result.token.substring(0, 20)}...`
            });
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            try {
                await browserManager.closeBrowser();
                addLogToUI({
                    level: 'info',
                    message: 'üîí Browser closed automatically'
                });
            } catch (closeError) {
                logger.warn(`Warning closing browser: ${closeError.message}`);
            }
            
            res.json({ 
                success: true, 
                token: result.token,
                message: 'Token extracted and saved successfully',
                isAuthorized: true
            });
            
        } else {
            addLogToUI({
                level: 'warning',
                message: `‚ö†Ô∏è Token extraction failed: ${result.error}`
            });
            
            res.json({ 
                success: false, 
                error: result.error || 'Token extraction failed'
            });
        }
        
    } catch (error) {
        logger.error('Token extraction error:', error);
        addLogToUI({
            level: 'error',
            message: `‚ùå Token extraction error: ${error.message}`
        });
        res.json({ success: false, error: error.message });
    }
});


// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
app.get('/api/tokens', (req, res) => {
    try {
        if (global.tokenManager) {
            const stats = global.tokenManager.getStats();
            res.json({
                success: true,
                data: stats
            });
        } else {
            res.json({
                success: false,
                error: 'TokenManager not initialized'
            });
        }
    } catch (error) {
        res.json({
            success: false,
            error: error.message
        });
    }
});

// API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–° –û–¢–õ–ê–î–ö–û–ô)
app.post('/api/tokens/add', async (req, res) => {
    try {
        const { token } = req.body;
        
        logger.info(`üé´ API /api/tokens/add called with token: ${token ? token.substring(0, 20) + '...' : 'null'}`);
        
        if (!token || token.length < 10) {
            logger.warn(`‚ùå Invalid token format: ${token}`);
            return res.json({
                success: false,
                error: 'Invalid token format'
            });
        }
        
        if (global.tokenManager) {
            logger.info(`‚úÖ TokenManager found, adding token...`);
            const added = await global.tokenManager.addToken(token);
            
            logger.info(`üé´ Token add result: ${added}`);
            
            res.json({
                success: added,
                message: added ? 'Token added successfully' : 'Token already exists'
            });
        } else {
            logger.error(`‚ùå TokenManager not initialized`);
            res.json({
                success: false,
                error: 'TokenManager not initialized'
            });
        }
    } catch (error) {
        logger.error(`‚ùå Error in /api/tokens/add: ${error.message}`);
        res.json({
            success: false,
            error: error.message
        });
    }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
app.delete('/api/tokens/:index', async (req, res) => {
    try {
        const index = parseInt(req.params.index);
        
        if (global.tokenManager) {
            const removed = await global.tokenManager.removeToken(index);
            res.json({
                success: removed,
                message: removed ? 'Token removed successfully' : 'Failed to remove token'
            });
        } else {
            res.json({
                success: false,
                error: 'TokenManager not initialized'
            });
        }
    } catch (error) {
        res.json({
            success: false,
            error: error.message
        });
    }
});



// === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
    logger.info(`üöÄ Truth Social Parser API Server running on port ${PORT}`);
    logger.info(`üìä Dashboard: http://localhost:${PORT}`);
    logger.info(`‚ö° Mode: API-only (browsers disabled)`);
    
    addLogToUI({
        level: 'info',
        message: `üöÄ Server started in API mode on port ${PORT}`
    });
    
    updateStats({
        running: false,
        profilesCount: 0,
        accountsCount: 0,
        postsFound: 0,
        lastActivity: new Date().toISOString()
    });
});

// Graceful shutdown - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
let isShuttingDown = false;

process.on('SIGINT', () => {
    if (isShuttingDown) return;
    isShuttingDown = true;
    
    logger.info('üõë Shutting down server...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    for (const [username, intervalId] of monitoringIntervals) {
        clearInterval(intervalId);
    }
    monitoringIntervals.clear();

    
    
    server.close(() => {
        logger.info('‚úÖ Server closed');
        process.exit(0);
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        logger.info('üî™ Force closing server');
        process.exit(1);
    }, 2000);
});

module.exports = app;