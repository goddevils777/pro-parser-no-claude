const socket = io();

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const startBtn = document.getElementById('start-btn');
const stopBtn = document.getElementById('stop-btn');
const addProfileBtn = document.getElementById('add-profile-btn');
const usernameInput = document.getElementById('username-input');
const keywordsInput = document.getElementById('keywords-input');
const profilesList = document.getElementById('profiles-list');
const parserStatus = document.getElementById('parser-status');
const totalPosts = document.getElementById('total-posts');
const totalErrors = document.getElementById('total-errors');
const profilesCount = document.getElementById('profiles-count');
const postsPerHour = document.getElementById('posts-per-hour');
const successRate = document.getElementById('success-rate');
const recentPosts = document.getElementById('recent-posts');
const logsContainer = document.getElementById('logs-container');
const avgParseTime = document.getElementById('avg-parse-time');
const minParseTime = document.getElementById('min-parse-time');
const maxParseTime = document.getElementById('max-parse-time');
const clearLogsBtn = document.getElementById('clear-logs-btn');
const clearPostsBtn = document.getElementById('clear-posts-btn');
const profilesCountStatus = document.getElementById('profiles-count-status');
const authorizedCountStatus = document.getElementById('authorized-count-status');
const requiredCountStatus = document.getElementById('required-count-status');
const stillNeedStatus = document.getElementById('still-need-status');
const readinessStatus = document.getElementById('readiness-status');


// WebSocket events
socket.on('stats', (stats) => {
    updateStats(stats);
});

socket.on('new-post', (post) => {
    addPostToUI(post);
});

socket.on('log', (log) => {
    addLogToUI(log);
});

socket.on('parse-stats', (stats) => {
    updateParseStats(stats);
});

socket.on('logs-cleared', () => {
    logsContainer.innerHTML = '';
});

// Event listeners
startBtn.addEventListener('click', startParser);
stopBtn.addEventListener('click', stopParser);
addProfileBtn.addEventListener('click', addProfile);
clearLogsBtn.addEventListener('click', clearLogs);
clearPostsBtn.addEventListener('click', clearPosts);
usernameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') addProfile();
});

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º
// –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é startParser –≤ public/script.js
async function startParser() {
    try {
        console.log('Starting parser...'); // –û–¢–õ–ê–î–ö–ê
        
        startBtn.disabled = true;
        startBtn.textContent = 'Starting...';
        
        const response = await fetch('/api/parser/start', { method: 'POST' });
        const result = await response.json();
        
        console.log('Start result:', result); // –û–¢–õ–ê–î–ö–ê
        
        if (result.success) {
            addLogToUI({ level: 'success', message: 'Parser started successfully' });
        } else {
            console.error('Start failed:', result.error); // –û–¢–õ–ê–î–ö–ê
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∞—Ö –≤–º–µ—Å—Ç–æ alert
            addLogToUI({ 
                level: 'error', 
                message: `‚ùå Failed to start parser: ${result.error}` 
            });
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (result.error.includes('INSUFFICIENT ACCOUNTS') || result.error.includes('Need') || result.error.includes('accounts')) {
                addLogToUI({ 
                    level: 'warning', 
                    message: 'üß™ TEST MODE: Each profile needs exactly 3 authorized accounts for testing' 
                });
                
                addLogToUI({ 
                    level: 'info', 
                    message: 'üí° Go to "Account Management" section to authorize more accounts' 
                });
                
                addLogToUI({ 
                    level: 'info', 
                    message: 'üîÑ Will be changed back to 10 accounts after testing is complete' 
                });
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            startBtn.disabled = false;
            startBtn.textContent = 'Start Parser';
        }
    } catch (error) {
        console.error('Start error:', error); // –û–¢–õ–ê–î–ö–ê
        
        startBtn.disabled = false;
        startBtn.textContent = 'Start Parser';
        
        addLogToUI({ 
            level: 'error', 
            message: `‚ùå Failed to start parser: ${error.message}` 
        });
    }
}

async function stopParser() {
    try {
        console.log('Stopping parser...'); // –û–¢–õ–ê–î–ö–ê
        
        const response = await fetch('/api/parser/stop', { method: 'POST' });
        const result = await response.json();
        
        console.log('Stop result:', result); // –û–¢–õ–ê–î–ö–ê
        
        if (result.success) {
            addLogToUI({ level: 'info', message: 'Parser stopped' });
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            startBtn.disabled = false;
            startBtn.textContent = 'Start Parser';
            stopBtn.disabled = true;
            
        } else {
            addLogToUI({ level: 'error', message: 'Failed to stop: ' + result.error });
        }
    } catch (error) {
        console.log('Stop error:', error); // –û–¢–õ–ê–î–ö–ê
        addLogToUI({ level: 'error', message: 'Failed to stop parser: ' + error.message });
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
async function addProfile() {
    const username = usernameInput.value.trim();
    const keywords = keywordsInput.value.trim().split(',').map(k => k.trim()).filter(k => k);
    
    if (!username) {
        alert('Please enter a username');
        return;
    }
    
    try {
        const response = await fetch('/api/profiles', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, keywords })
        });
        
        const result = await response.json();
        
        if (result.success) {
            usernameInput.value = '';
            keywordsInput.value = '';
            loadProfiles();
            addLogToUI({ level: 'success', message: `Profile @${username} added` });
        }
    } catch (error) {
        addLogToUI({ level: 'error', message: 'Failed to add profile: ' + error.message });
    }
}

async function deleteProfile(index) {
    try {
        const response = await fetch(`/api/profiles/${index}`, { method: 'DELETE' });
        const result = await response.json();
        
        if (result.success) {
            loadProfiles();
            addLogToUI({ level: 'info', message: 'Profile deleted' });
        }
    } catch (error) {
        addLogToUI({ level: 'error', message: 'Failed to delete profile: ' + error.message });
    }
}

async function loadProfiles() {
    try {
        const response = await fetch('/api/profiles');
        const profiles = await response.json();
        
        profilesList.innerHTML = '';
        profilesCount.textContent = profiles.length;
        
        profiles.forEach((profile, index) => {
            const profileDiv = document.createElement('div');
            profileDiv.className = 'profile-item';
            profileDiv.innerHTML = `
                <div class="profile-info">
                    <div class="profile-username">@${profile.username}</div>
                    <div class="profile-keywords">
                        Keywords: ${profile.keywords.length > 0 ? profile.keywords.join(', ') : 'All posts'}
                    </div>
                </div>
                <button class="delete-btn" onclick="deleteProfile(${index})">Delete</button>
            `;
            profilesList.appendChild(profileDiv);
        });
    } catch (error) {
        addLogToUI({ level: 'error', message: 'Failed to load profiles: ' + error.message });
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
function updateStats(stats) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (parserStatus) parserStatus.textContent = stats.isRunning ? 'running' : 'stopped';
    if (totalPosts) totalPosts.textContent = stats.totalPosts || 0;
    if (totalErrors) totalErrors.textContent = stats.errors || 0;
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
    if (stats.isRunning) {
        if (startBtn) {
            startBtn.disabled = true;
            startBtn.textContent = 'Parser Running';
        }
        if (stopBtn) stopBtn.disabled = false;
    } else {
        if (startBtn) {
            startBtn.disabled = false;
            startBtn.textContent = 'Start Parser';
        }
        if (stopBtn) stopBtn.disabled = true;
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    if (postsPerHour) {
        const postsPerHourValue = stats.totalPosts > 0 ? Math.round(stats.totalPosts * (3600000 / (Date.now() - (stats.startTime || Date.now())))) : 0;
        postsPerHour.textContent = postsPerHourValue;
    }
    
    if (successRate) {
        const total = (stats.totalPosts || 0) + (stats.errors || 0);
        const successRateValue = total > 0 ? Math.round(((stats.totalPosts || 0) / total) * 100) : 100;
        successRate.textContent = successRateValue + '%';
    }
}

// –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é addPostToUI –≤ public/script.js (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù–û–í–´–• –ø–æ—Å—Ç–æ–≤)
function addPostToUI(post) {
    console.log('Adding NEW post to UI:', post.username, post.timestamp);
    
    if (!recentPosts) {
        console.error('recentPosts element not found');
        return;
    }
    
    const postElement = document.createElement('div');
    postElement.className = 'recent-post new-post'; // –ö–ª–∞—Å—Å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    const time = new Date(post.timestamp).toLocaleTimeString();
    const currentPostTime = new Date(post.timestamp).getTime();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –†–ï–ê–õ–¨–ù–´–ô –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–æ—Å—Ç–æ–º (–¢–û–õ–¨–ö–û –ë–û–õ–ï–ï –°–¢–ê–†–´–ï)
    const existingPosts = Array.from(recentPosts.children);
    let realInterval = null;
    
    if (existingPosts.length > 0) {
        // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¢–û–õ–¨–ö–û –ë–û–õ–ï–ï –°–¢–ê–†–´–ï)
        for (let i = 0; i < existingPosts.length; i++) {
            const existingPost = existingPosts[i];
            const existingUsername = existingPost.querySelector('.post-username')?.textContent;
            
            if (existingUsername === `@${post.username}`) {
                // –ù–∞—à–ª–∏ –ø–æ—Å—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const existingTimeStr = existingPost.querySelector('.post-time')?.dataset.timestamp;
                if (existingTimeStr) {
                    const existingTime = parseInt(existingTimeStr);
                    
                    // –í–ê–ñ–ù–û: –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ë–û–õ–ï–ï –°–¢–ê–†–´–ï –ø–æ—Å—Ç—ã (existingTime < currentPostTime)
                    if (existingTime < currentPostTime) {
                        realInterval = Math.round((currentPostTime - existingTime) / 1000);
                        console.log(`Found older post: current=${currentPostTime}, existing=${existingTime}, interval=${realInterval}s`);
                        break;
                    } else {
                        console.log(`Skipping newer post: current=${currentPostTime}, existing=${existingTime}`);
                    }
                }
            }
        }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    const timingInfo = realInterval !== null && realInterval > 0 ? 
        ` | Real interval: ${realInterval}s` : 
        ' | Latest post';
    
    postElement.innerHTML = `
        <div class="post-header">
            <span class="post-username">@${post.username}</span>
            <span class="post-time" data-timestamp="${currentPostTime}">${time} (${post.parseTime}ms)${timingInfo}</span>
            <span class="post-account">by ${post.parsedBy || 'unknown'}</span>
            ${post.tabId ? `<span class="post-tab">Tab #${post.tabId}</span>` : ''}
        </div>
        <div class="post-content">${post.content}</div>
        <div class="post-footer">
            <span class="post-ip">${post.accountIP || 'Direct'}</span>
            ${post.foundWith ? `<span class="post-selector">Found: ${post.foundWith}</span>` : ''}
            ${post.attempts ? `<span class="post-attempts">${post.attempts} attempts</span>` : ''}
            ${realInterval !== null && realInterval > 0 ? `<span class="post-real-interval">‚è∞ ${realInterval}s</span>` : ''}
            <span class="post-new">üî• NEW</span>
        </div>
    `;
    
    // –ù–û–í–´–ï –ø–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º –°–í–ï–†–•–£
    recentPosts.insertBefore(postElement, recentPosts.firstChild);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤
    while (recentPosts.children.length > 50) {
        recentPosts.removeChild(recentPosts.lastChild);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤
    const totalPostsElement = document.getElementById('total-posts');
    if (totalPostsElement) {
        const currentCount = parseInt(totalPostsElement.textContent) || 0;
        totalPostsElement.textContent = currentCount + 1;
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
    postElement.style.opacity = '0';
    postElement.style.transform = 'translateY(-10px)';
    
    setTimeout(() => {
        postElement.style.transition = 'all 0.3s ease';
        postElement.style.opacity = '1';
        postElement.style.transform = 'translateY(0)';
    }, 100);
    
    console.log(`NEW post added: @${post.username}, realInterval: ${realInterval}s`);
}

function addLogToUI(log) {
    const logDiv = document.createElement('div');
    logDiv.className = `log-item ${log.level}`;
    logDiv.textContent = `[${new Date().toLocaleTimeString()}] ${log.message}`;
    
    logsContainer.insertBefore(logDiv, logsContainer.firstChild);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    while (logsContainer.children.length > 100) {
        logsContainer.removeChild(logsContainer.lastChild);
    }
    
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
    logsContainer.scrollTop = 0;
}

function updatePerformanceMetrics(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const avgTime = document.getElementById(`avg-time-${data.username}`) || createUserMetric(data.username);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±)
    const currentAvg = parseInt(avgTime.textContent) || 0;
    const newAvg = currentAvg === 0 ? data.parseTime : Math.round((currentAvg + data.parseTime) / 2);
    
    avgTime.textContent = `${newAvg}ms`;
    avgTime.className = newAvg < 1000 ? 'metric-good' : newAvg < 3000 ? 'metric-ok' : 'metric-slow';
}

function createUserMetric(username) {
    const recentPosts = document.getElementById('recent-posts');
    const metricDiv = document.createElement('div');
    metricDiv.innerHTML = `
        <div class="user-metric">
            <span>@${username} avg time:</span>
            <span id="avg-time-${username}" class="metric-value">0ms</span>
        </div>
    `;
    recentPosts.appendChild(metricDiv);
    return document.getElementById(`avg-time-${username}`);
}

function updateParseStats(stats) {
    avgParseTime.textContent = stats.average > 0 ? stats.average + 'ms' : '0ms';
    minParseTime.textContent = stats.min < Infinity ? stats.min + 'ms' : '0ms';
    maxParseTime.textContent = stats.max + 'ms';
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò ===
const addAccountBtn = document.getElementById('add-account-btn');
const accountUsernameInput = document.getElementById('account-username-input');
const accountsList = document.getElementById('accounts-list');

addAccountBtn.addEventListener('click', addAccount);
accountUsernameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') addAccount();
});

async function addAccount() {
    const username = accountUsernameInput.value.trim();
    
    if (!username) {
        alert('Please enter account username');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    addAccountBtn.disabled = true;
    addAccountBtn.textContent = 'Opening browser...';
    
    try {
        const response = await fetch('/api/accounts/authorize', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username })
        });
        
        const result = await response.json();
        
        if (result.success) {
            accountUsernameInput.value = '';
            addAccountBtn.textContent = 'Waiting for authorization...';
            // –ù–ï —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            loadAccounts();
        } else {
            alert('Failed to add account: ' + result.error);
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            addAccountBtn.disabled = false;
            addAccountBtn.textContent = 'Add Account';
        }
    } catch (error) {
        alert('Error: ' + error.message);
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        addAccountBtn.disabled = false;
        addAccountBtn.textContent = 'Add Account';
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function confirmAuthorization(username) {
    try {
        const response = await fetch('/api/accounts/confirm', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username })
        });
        
        const result = await response.json();
        
        if (result.success) {
            loadAccounts();
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            addAccountBtn.disabled = false;
            addAccountBtn.textContent = 'Add Account';
        } else {
            alert('Failed to confirm: ' + result.error);
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
async function deleteAccount(username) {
    if (!confirm(`Delete account ${username}?`)) return;
    
    try {
        const response = await fetch(`/api/accounts/${username}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
            loadAccounts();
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            addAccountBtn.disabled = false;
            addAccountBtn.textContent = 'Add Account';
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
async function loadAccounts() {
    try {
        const response = await fetch('/api/accounts');
        const accounts = await response.json();
        
        accountsList.innerHTML = '';
        
        accounts.forEach(account => {
            const accountDiv = document.createElement('div');
            accountDiv.className = `account-item ${account.status}`;
            
            const statusIcon = account.status === 'authorized' ? '‚úÖ' : 
                             account.status === 'authorizing' ? 'üîÑ' : '‚ùå';
            
            accountDiv.innerHTML = `
                <div class="account-info">
                    <span class="account-status">${statusIcon}</span>
                    <span class="account-username">${account.username}</span>
                    <span class="account-ip">${account.ip || 'No IP'}</span>
                    <span class="account-cookies">${account.cookiesCount || 0} cookies</span>
                </div>
                <div class="account-actions">
                    ${account.status === 'authorizing' ? 
                        `<button onclick="confirmAuthorization('${account.username}')" class="btn btn-success btn-sm">I'm Authorized</button>` : ''}
                    <button onclick="deleteAccount('${account.username}')" class="btn btn-danger btn-sm">Delete</button>
                </div>
            `;
            
            accountsList.appendChild(accountDiv);
        });
        
    } catch (error) {
        console.error('Failed to load accounts:', error);
    }
}

function clearLogs() {
    socket.emit('clear-logs');
}

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
function clearPosts() {
    if (confirm('Are you sure you want to clear all recent posts?')) {
        // –û—á–∏—â–∞–µ–º UI
        recentPosts.innerHTML = '';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        socket.emit('clear-posts');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
        addLogToUI({ 
            level: 'info', 
            message: 'üóëÔ∏è Recent posts cleared' 
        });
        
        console.log('Posts cleared by user');
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateAccountStatus() {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π
    fetch('/api/profiles')
        .then(response => response.json())
        .then(profiles => {
            const profilesCount = profiles.length;
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            fetch('/api/accounts')
                .then(response => response.json())
                .then(accounts => {
                    const authorizedCount = accounts.filter(acc => acc.status === 'authorized').length;
                    const requiredCount = profilesCount * 3; // 10 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
                    const stillNeed = Math.max(0, requiredCount - authorizedCount);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                    if (profilesCountStatus) profilesCountStatus.textContent = profilesCount;
                    if (authorizedCountStatus) authorizedCountStatus.textContent = authorizedCount;
                    if (requiredCountStatus) requiredCountStatus.textContent = requiredCount;
                    if (stillNeedStatus) {
                        stillNeedStatus.textContent = stillNeed;
                        
                        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                        stillNeedStatus.className = 'status-value ' + 
                            (stillNeed === 0 ? 'status-success' : 'status-warning');
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                    if (readinessStatus) {
                        if (profilesCount === 0) {
                            readinessStatus.textContent = 'No Profiles';
                            readinessStatus.className = 'status-badge status-error';
                        } else if (stillNeed === 0) {
                            readinessStatus.textContent = 'Ready!';
                            readinessStatus.className = 'status-badge status-ready';
                        } else if (authorizedCount > 0) {
                            readinessStatus.textContent = `Need ${stillNeed} more`;
                            readinessStatus.className = 'status-badge status-partial';
                        } else {
                            readinessStatus.textContent = 'Not Ready';
                            readinessStatus.className = 'status-badge status-error';
                        }
                    }
                    
                    console.log(`Status: ${profilesCount} profiles, ${authorizedCount}/${requiredCount} accounts, need ${stillNeed} more`);
                })
                .catch(error => console.error('Failed to load accounts:', error));
        })
        .catch(error => console.error('Failed to load profiles:', error));
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
const originalLoadProfiles = loadProfiles;
loadProfiles = function() {
    originalLoadProfiles();
    updateAccountStatus();
};

const originalLoadAccounts = loadAccounts;
loadAccounts = function() {
    originalLoadAccounts();
    updateAccountStatus();
};

// –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
const originalAddProfile = addProfile;
addProfile = async function() {
    await originalAddProfile();
    setTimeout(updateAccountStatus, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
};

const originalDeleteProfile = deleteProfile;
deleteProfile = async function(index) {
    await originalDeleteProfile(index);
    setTimeout(updateAccountStatus, 500);
};

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
socket.on('account-status', () => {
    setTimeout(updateAccountStatus, 200);
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    setTimeout(updateAccountStatus, 1000);
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
setInterval(updateAccountStatus, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

// –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
socket.on('account-status', (data) => {
    loadAccounts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
window.addEventListener('load', () => {
    loadAccounts();
});

// –î–æ–±–∞–≤–∏—Ç—å –≤ WebSocket events —Å–µ–∫—Ü–∏—é –≤ public/script.js
socket.on('saved-posts', (posts) => {
    console.log(`Received ${posts.length} saved posts from server`);
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    recentPosts.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    posts.forEach((post, index) => {
        console.log(`Loading saved post ${index + 1}/${posts.length}: @${post.username} at ${post.timestamp}`);
        addSavedPostToUI(post);
    });
    
    console.log(`Loaded ${posts.length} saved posts in correct order`);
});

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏)
function addSavedPostToUI(post) {
    if (!recentPosts) {
        console.error('recentPosts element not found');
        return;
    }
    
    const postElement = document.createElement('div');
    postElement.className = 'recent-post saved-post'; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è saved –ø–æ—Å—Ç–æ–≤
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    const time = new Date(post.timestamp).toLocaleTimeString();
    const currentPostTime = new Date(post.timestamp).getTime();
    
    // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
    const timingInfo = ' | Saved post';
    
    postElement.innerHTML = `
        <div class="post-header">
            <span class="post-username">@${post.username}</span>
            <span class="post-time" data-timestamp="${currentPostTime}">${time} (${post.parseTime || 0}ms)${timingInfo}</span>
            <span class="post-account">by ${post.parsedBy || 'unknown'}</span>
            ${post.tabId ? `<span class="post-tab">Tab #${post.tabId}</span>` : ''}
        </div>
        <div class="post-content">${post.content}</div>
        <div class="post-footer">
            <span class="post-ip">${post.accountIP || 'Direct'}</span>
            ${post.foundWith ? `<span class="post-selector">Found: ${post.foundWith}</span>` : ''}
            ${post.attempts ? `<span class="post-attempts">${post.attempts} attempts</span>` : ''}
            <span class="post-saved">üíæ Saved</span>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –í –ö–û–ù–ï–¶ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ (–ø–æ—Å—Ç—ã —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã)
    recentPosts.appendChild(postElement);
}


// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
socket.on('connect', () => {
    addLogToUI({ level: 'info', message: 'Connected to server' });
});

socket.on('performance', (data) => {
    updatePerformanceMetrics(data);
});

// –î–æ–±–∞–≤–∏—Ç—å –≤ public/script.js –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö socket.on
socket.on('logs-cleared', () => {
    logsContainer.innerHTML = '';
    recentPosts.innerHTML = ''; // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ø–æ—Å—Ç—ã
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    if (totalPosts) totalPosts.textContent = '0';
    if (totalErrors) totalErrors.textContent = '0';
    
    console.log('Logs and posts cleared');
});

// –î–æ–±–∞–≤–∏—Ç—å –≤ public/script.js –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö socket.on
socket.on('posts-cleared', () => {
    recentPosts.innerHTML = '';
    
    addLogToUI({ 
        level: 'info', 
        message: 'üóëÔ∏è Recent posts cleared on all clients' 
    });
    
    console.log('Posts cleared by server');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.addEventListener('load', () => {
    loadProfiles();
    addLogToUI({ level: 'info', message: 'Web interface loaded' });
});

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è HTML onclick
window.deleteProfile = deleteProfile;


