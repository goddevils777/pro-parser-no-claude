// browser-manager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const puppeteer = require('puppeteer');
const logger = require('./logger');
const TruthSocialAPI = require('./truth-social-api');




class BrowserManager {
    constructor(truthSocialAPI = null) {
        this.browser = null;
        this.page = null;
        this.isRunning = false;
        this.truthSocialAPI = truthSocialAPI; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ API
    }
// –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π IP
  // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π IP
    async startBrowser(maxRetries = 3) {
        logger.info(`üöÄ Starting browser with ${maxRetries} max retries...`);
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            let currentProxy = null;
            
            try {
                logger.info(`üåê Browser attempt ${attempt}/${maxRetries}...`);
                
                // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
                currentProxy = await this.getProxyForAttempt(attempt);
                logger.info(`üîç Got proxy for attempt ${attempt}: ${currentProxy ? 'YES' : 'NO'}`);
                
                if (currentProxy) {
                    logger.info(`üîó Testing IP: ${currentProxy.substring(0, 50)}...`);
                } else {
                    logger.info(`üîó Testing direct connection`);
                }
                
                // –ü–û–õ–ù–û–°–¢–¨–Æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –±—ã–ª
                await this.forceCloseBrowser();
                logger.info(`‚úÖ Previous browser closed`);
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                const browserOptions = {
                    headless: false,
                    defaultViewport: null,
                    args: [
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-web-security',
                        '--disable-features=VizDisplayCompositor',
                        '--disable-dev-shm-usage'
                    ]
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏
                if (currentProxy) {
                    browserOptions.args.push(`--proxy-server=${currentProxy}`);
                    logger.info(`üîó Added proxy to browser args: ${currentProxy.substring(0, 50)}...`);
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                logger.info(`üåê Launching Puppeteer browser...`);
                this.browser = await puppeteer.launch(browserOptions);
                logger.info(`‚úÖ Browser launched successfully`);
                
                this.page = await this.browser.newPage();
                logger.info(`‚úÖ New page created`);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
                if (currentProxy && this.proxyAuth) {
                    await this.page.authenticate({
                        username: this.proxyAuth.username,
                        password: this.proxyAuth.password
                    });
                    logger.info(`üîê Proxy authentication set`);
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
                await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
                logger.info(`‚úÖ User-Agent set`);
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º IP - –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å Truth Social
                logger.info(`üß™ Testing IP connection to Truth Social...`);
                
               await this.page.goto('https://truthsocial.com/', {
                    waitUntil: 'domcontentloaded',
                    timeout: 15000
                });
                logger.info(`‚úÖ Page loaded successfully`);

                // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è Cloudflare –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
                await new Promise(resolve => setTimeout(resolve, 8000));
                logger.info(`‚úÖ Extended wait completed`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                const pageContent = await this.page.content();
                const title = await this.page.title();
                
                logger.info(`üìÑ Final page title: "${title}"`);
                logger.info(`üìÑ Final page content length: ${pageContent.length} chars`);
                
                // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ Cloudflare –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º
                if (title.toLowerCase().includes('cloudflare')) {
                    logger.info(`üõ°Ô∏è Cloudflare still active. Browser stays open for manual verification.`);
                    this.isRunning = true;
                    
                    return { 
                        success: true, 
                        message: `Browser opened but Cloudflare verification required. Please complete verification manually.`,
                        proxy: currentProxy || 'direct',
                        needsVerification: true
                    };
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
                const isValidPage = (
                    title.toLowerCase().includes('truth social') ||
                    title.toLowerCase().includes('sign in') ||
                    pageContent.includes('truth social') ||
                    pageContent.includes('sign_in')
                ) && !pageContent.includes('blocked');
                
                logger.info(`‚úÖ Page validation result: ${isValidPage}`);
                
                if (isValidPage) {
                    // IP –†–ê–ë–û–¢–ê–ï–¢!
                    this.isRunning = true;
                    logger.info(`‚úÖ IP ${currentProxy ? currentProxy.substring(0, 30) + '***' : 'direct'} WORKS! Browser ready.`);
                    
                    return { 
                        success: true, 
                        message: `Browser opened with working IP (attempt ${attempt})`,
                        proxy: currentProxy || 'direct'
                    };
                } else {
                    // IP –ù–ï –†–ê–ë–û–¢–ê–ï–¢
                    throw new Error(`IP blocked or Truth Social not accessible. Title: "${title}"`);
                }
                
            } catch (error) {
                // IP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                logger.error(`‚ùå Attempt ${attempt} FAILED: ${error.message}`);
                
                // –ü–û–õ–ù–û–°–¢–¨–Æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                await this.forceCloseBrowser();
                
                if (attempt < maxRetries) {
                    logger.info(`üîÑ Trying next IP (${attempt + 1}/${maxRetries})...`);
                    await this.sleep(2000);
                } else {
                    logger.error(`‚ùå All ${maxRetries} IP attempts failed`);
                }
            }
        }
        
        // –í—Å–µ IP –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        this.isRunning = false;
        return { 
            success: false, 
            error: `No working IP found after ${maxRetries} attempts.` 
        };
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    async forceCloseBrowser() {
        try {
            if (this.browser) {
                await this.browser.close();
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        } finally {
            this.browser = null;
            this.page = null;
            this.isRunning = false;
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Bearer —Ç–æ–∫–µ–Ω–∞
    async extractToken() {
        try {
            if (!this.page) {
                throw new Error('Browser page not available');
            }

            logger.info('üîç Extracting Bearer token from browser...');

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await new Promise(resolve => setTimeout(resolve, 2000));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const currentUrl = this.page.url();
            logger.info(`üìç Current page URL: ${currentUrl}`);

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            if (currentUrl.includes('/auth/sign_in') || currentUrl.includes('/login')) {
                return { 
                    success: false, 
                    error: 'Please complete login first. You are still on the login page.' 
                };
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
            const tokenData = await this.page.evaluate(() => {
                const results = {
                    localStorage: {},
                    sessionStorage: {},
                    cookies: document.cookie,
                    url: window.location.href
                };

                // –°–∫–∞–Ω–∏—Ä—É–µ–º localStorage
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    const value = localStorage.getItem(key);
                    results.localStorage[key] = value;
                }

                // –°–∫–∞–Ω–∏—Ä—É–µ–º sessionStorage
                for (let i = 0; i < sessionStorage.length; i++) {
                    const key = sessionStorage.key(i);
                    const value = sessionStorage.getItem(key);
                    results.sessionStorage[key] = value;
                }

                return results;
            });

            logger.info(`üîç Found ${Object.keys(tokenData.localStorage).length} localStorage items`);
            logger.info(`üîç Found ${Object.keys(tokenData.sessionStorage).length} sessionStorage items`);
            logger.info(`üîç Current URL: ${tokenData.url}`);

            // –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö
            let token = null;

            // –ü–æ–∏—Å–∫ –≤ localStorage
            for (const [key, value] of Object.entries(tokenData.localStorage)) {
                logger.info(`üîç Checking localStorage key: ${key}`);
                
                if (value && typeof value === 'string') {
                    try {
                        // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
                        if (value.startsWith('{') || value.startsWith('[')) {
                            const parsed = JSON.parse(value);
                            if (parsed.access_token) {
                                token = parsed.access_token;
                                logger.info(`‚úÖ Found token in localStorage.${key}.access_token`);
                                break;
                            }
                        }
                        
                        // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞
                        if (value.startsWith('ey') && value.length > 100) {
                            token = value;
                            logger.info(`‚úÖ Found direct token in localStorage.${key}`);
                            break;
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                    }
                }
            }

            // –ü–æ–∏—Å–∫ –≤ sessionStorage –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage
            if (!token) {
                for (const [key, value] of Object.entries(tokenData.sessionStorage)) {
                    logger.info(`üîç Checking sessionStorage key: ${key}`);
                    
                    if (value && typeof value === 'string') {
                        try {
                            if (value.startsWith('{') || value.startsWith('[')) {
                                const parsed = JSON.parse(value);
                                if (parsed.access_token) {
                                    token = parsed.access_token;
                                    logger.info(`‚úÖ Found token in sessionStorage.${key}.access_token`);
                                    break;
                                }
                            }
                            
                            if (value.startsWith('ey') && value.length > 100) {
                                token = value;
                                logger.info(`‚úÖ Found direct token in sessionStorage.${key}`);
                                break;
                            }
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        }
                    }
                }
            }

            if (token) {
                logger.info(`‚úÖ Token extracted: ${token.substring(0, 20)}...`);
                return { success: true, token: token };
            } else {
                logger.warn('‚ö†Ô∏è Token not found. Available keys:');
                logger.warn(`localStorage: ${Object.keys(tokenData.localStorage).join(', ')}`);
                logger.warn(`sessionStorage: ${Object.keys(tokenData.sessionStorage).join(', ')}`);
                
                return { 
                    success: false, 
                    error: 'Token not found. Make sure you are fully logged in to Truth Social.' 
                };
            }

        } catch (error) {
            logger.error(`‚ùå Token extraction error: ${error.message}`);
            return { success: false, error: error.message };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
    async getProxyForAttempt(attempt) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ProxyManager –∏–∑ truth-social-api
            const proxy = truthSocialAPI.getBestProxy();
            
            if (proxy) {
                logger.info(`üì° Got proxy from TruthSocialAPI: ${proxy.substring(0, 30)}...`);
                return this.convertProxyFormat(proxy);
            } else {
                logger.info(`üîó No proxy available from TruthSocialAPI, using direct connection`);
                return null;
            }
            
        } catch (error) {
            logger.warn(`‚ö†Ô∏è Error getting proxy from TruthSocialAPI: ${error.message}, using direct connection`);
            return null;
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–∫—Å–∏
// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–∫—Å–∏
    convertProxyFormat(proxy) {
        try {
            // –¢–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: http://username:password@ip:port
            const url = new URL(proxy);
            const host = url.hostname;
            const port = url.port;
            const username = url.username;
            const password = url.password;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (username && password) {
                this.proxyAuth = {
                    username: username,
                    password: password
                };
                logger.info(`üîê Proxy auth saved for user: ${username.substring(0, 10)}...`);
            } else {
                this.proxyAuth = null;
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç ip:port
            const simpleProxy = `${host}:${port}`;
            
            logger.info(`üîß Proxy converted: ${proxy.substring(0, 30)}... -> ${simpleProxy}`);
            return simpleProxy;
            
        } catch (error) {
            logger.error(`‚ùå Failed to convert proxy format: ${error.message}`);
            return proxy;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    async addProxyToWhiteList(proxy) {
        try {
            const ProxyManager = require('./proxy-manager');
            const proxyManager = new ProxyManager();
            await proxyManager.init();
            await proxyManager.addToWhiteList(proxy, 'browser_success');
            logger.info(`‚úÖ Added working proxy to whitelist`);
        } catch (error) {
            logger.error(`Error adding proxy to whitelist: ${error.message}`);
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    async addProxyToBlackList(proxy) {
        try {
            const ProxyManager = require('./proxy-manager');
            const proxyManager = new ProxyManager();
            await proxyManager.init();
            await proxyManager.addToBlackList(proxy, 'browser_failed');
            logger.info(`‚ùå Added failed proxy to blacklist`);
        } catch (error) {
            logger.error(`Error adding proxy to blacklist: ${error.message}`);
        }
    }

    // –ü–∞—É–∑–∞
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    async closeBrowser() {
        try {
            if (this.browser) {
                await this.browser.close();
                this.browser = null;
                this.page = null;
                this.isRunning = false;
                logger.info('üîí Browser closed');
            }
        } catch (error) {
            logger.error(`Error closing browser: ${error.message}`);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    getStatus() {
        return {
            isRunning: this.isRunning,
            hasPage: !!this.page
        };
    }
}

module.exports = BrowserManager;