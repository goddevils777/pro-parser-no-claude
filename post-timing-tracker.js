// post-timing-tracker.js - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
const logger = require('./logger');

class PostTimingTracker {
    constructor() {
        this.lastPostTimes = new Map(); // username -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
        this.postIntervals = new Map(); // username -> –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
    trackPostTiming(username, postContent) {
        const now = Date.now();
        const lastTime = this.lastPostTimes.get(username);
        
        if (lastTime) {
            const interval = now - lastTime;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if (!this.postIntervals.has(username)) {
                this.postIntervals.set(username, []);
            }
            
            const intervals = this.postIntervals.get(username);
            intervals.push(interval);
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            if (intervals.length > 10) {
                intervals.shift();
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const avgInterval = Math.round(intervals.reduce((a, b) => a + b, 0) / intervals.length);
            const minInterval = Math.min(...intervals);
            const maxInterval = Math.max(...intervals);
            
            const realSeconds = Math.round(interval / 1000);
            const avgSeconds = Math.round(avgInterval / 1000);
            
            logger.info(`‚è∞ [POST TIMING] @${username}: ${realSeconds}s since last post | Avg: ${avgSeconds}s | Min: ${Math.round(minInterval/1000)}s | Max: ${Math.round(maxInterval/1000)}s`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (global.io) {
                global.io.emit('post-timing', {
                    username: username,
                    currentInterval: interval,
                    avgInterval: avgInterval,
                    minInterval: minInterval,
                    maxInterval: maxInterval,
                    totalPosts: intervals.length + 1,
                    intervals: intervals,
                    realSeconds: realSeconds,
                    avgSeconds: avgSeconds
                });
                
                global.io.emit('log', {
                    level: 'info',
                    message: `‚è∞ @${username} real timing: ${realSeconds}s interval (avg: ${avgSeconds}s)`
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
            this.lastPostTimes.set(username, now);
            
            return {
                interval: interval,
                avgInterval: avgInterval,
                minInterval: minInterval,
                maxInterval: maxInterval,
                realSeconds: realSeconds,
                avgSeconds: avgSeconds
            };
        } else {
            logger.info(`üéØ [FIRST POST] @${username}: Starting accurate timing tracking`);
            
            if (global.io) {
                global.io.emit('log', {
                    level: 'info',
                    message: `üéØ @${username}: First post detected - accurate timing started`
                });
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            this.lastPostTimes.set(username, now);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    getPostTimingStats() {
        const stats = {};
        
        for (const [username, intervals] of this.postIntervals) {
            if (intervals.length > 0) {
                const avgInterval = Math.round(intervals.reduce((a, b) => a + b, 0) / intervals.length);
                const minInterval = Math.min(...intervals);
                const maxInterval = Math.max(...intervals);
                
                stats[username] = {
                    totalPosts: intervals.length + 1,
                    avgInterval: avgInterval,
                    minInterval: minInterval,
                    maxInterval: maxInterval,
                    lastPostTime: this.lastPostTimes.get(username),
                    intervals: intervals
                };
            }
        }
        
        return stats;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ª–æ–≥–æ–≤
    getAccuratePostTiming(username) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userPosts = [];
        
        // –ò—â–µ–º –≤ –º–∞—Å—Å–∏–≤–µ recentPosts (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ global)
        if (global.recentPosts) {
            const posts = global.recentPosts.filter(post => post.username === username);
            posts.forEach(post => {
                userPosts.push({
                    timestamp: new Date(post.timestamp).getTime(),
                    content: post.content.substring(0, 50)
                });
            });
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        userPosts.sort((a, b) => b.timestamp - a.timestamp);
        
        if (userPosts.length >= 2) {
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            const intervals = [];
            
            for (let i = 0; i < userPosts.length - 1; i++) {
                const interval = userPosts[i].timestamp - userPosts[i + 1].timestamp;
                intervals.push(interval);
            }
            
            const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
            const minInterval = Math.min(...intervals);
            const maxInterval = Math.max(...intervals);
            
            logger.info(`üìä [ACCURATE TIMING] @${username}: Last ${intervals.length} intervals - Avg: ${Math.round(avgInterval/1000)}s | Min: ${Math.round(minInterval/1000)}s | Max: ${Math.round(maxInterval/1000)}s`);
            
            return {
                intervals: intervals,
                avgInterval: avgInterval,
                minInterval: minInterval,
                maxInterval: maxInterval,
                totalPosts: userPosts.length,
                accuracy: 'from_logs'
            };
        }
        
        return null;
    }
}

module.exports = PostTimingTracker;