// tab-parser.js - –ü–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
const logger = require('./logger');

class TabParser {
    constructor(proxyManager, timingTracker) {
        this.proxyManager = proxyManager;
        this.timingTracker = timingTracker;
        this.activeTabs = new Map(); // username -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    initializeTabCounters(accounts) {
        accounts.forEach(account => {
            this.activeTabs.set(account.username, 0);
        });
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∫–ª–∞–¥–æ–∫
    getTabsStats() {
        const stats = {};
        
        for (const [username, tabCount] of this.activeTabs) {
            stats[username] = {
                activeTabs: tabCount,
                maxTabs: 2,
                utilization: Math.round((tabCount / 2) * 100)
            };
        }
        
        return stats;
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    startParallelParsing(targetUsername, accounts) {
        logger.info(`üöÄ Starting controlled continuous parsing for @${targetUsername} with ${accounts.length} accounts (max 2 tabs per browser)`);
        
        let currentAccountIndex = 0;
        let tabCounter = 0;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ú–ê–ö–°–ò–ú–£–ú 2)
        this.initializeTabCounters(accounts);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        const continuousInterval = setInterval(() => {
            // –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
            let selectedAccount = null;
            let minTabs = Infinity;
            
            for (let i = 0; i < accounts.length; i++) {
                const account = accounts[(currentAccountIndex + i) % accounts.length];
                const activeTabs = this.activeTabs.get(account.username) || 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏–º–µ–µ—Ç –º–µ–Ω–µ–µ 2 –≤–∫–ª–∞–¥–æ–∫
                if (account && account.browser && account.context && activeTabs < 2) {
                    if (activeTabs < minTabs) {
                        minTabs = activeTabs;
                        selectedAccount = account;
                    }
                }
            }
            
            currentAccountIndex++;
            tabCounter++;
            
            if (selectedAccount) {
                const currentTabs = this.activeTabs.get(selectedAccount.username);
                
                logger.info(`üÜï [Tab #${tabCounter}] Opening new tab in ${selectedAccount.username} for @${targetUsername} (${currentTabs}/2 tabs active)`);
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
                this.activeTabs.set(selectedAccount.username, currentTabs + 1);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ (–Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
                this.parseInNewTab(targetUsername, selectedAccount, tabCounter).catch(error => {
                    logger.error(`‚ùå [Tab #${tabCounter}] Error in ${selectedAccount.username}: ${error.message}`);
                }).finally(() => {
                    // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
                    const tabs = this.activeTabs.get(selectedAccount.username) || 0;
                    this.activeTabs.set(selectedAccount.username, Math.max(0, tabs - 1));
                    logger.info(`üìâ [Tab #${tabCounter}] ${selectedAccount.username} now has ${Math.max(0, tabs - 1)}/2 tabs active`);
                });
                
            } else {
                // –í—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
                const tabStatus = accounts.map(acc => 
                    `${acc.username}:${this.activeTabs.get(acc.username) || 0}/2`
                ).join(', ');
                
                logger.info(`‚ö° All browsers working at capacity (2 tabs each) - ${tabStatus}`);
                
                if (global.io) {
                    global.io.emit('log', {
                        level: 'info',
                        message: `‚ö° All browsers active (2 tabs each) - ${accounts.length} browsers working`
                    });
                }
            }
            
        }, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞

        return continuousInterval;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    async parseInNewTab(targetUsername, account, tabId) {
        const startTime = Date.now();
        let page = null;
        
        try {
            const currentTabs = this.activeTabs.get(account.username) || 0;
            logger.info(`üîÑ [Tab #${tabId}] [${account.username}] Starting parse @${targetUsername} (${currentTabs}/2 tabs in browser)`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if (global.sendLogUpdate) {
                global.sendLogUpdate({
                    level: 'info',
                    message: `üîÑ [Tab #${tabId}] [${account.username}] Starting parse @${targetUsername} (${currentTabs}/2 tabs)`
                });
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            page = await account.context.newPage();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            await page.route('**/*', (route) => {
                const resourceType = route.request().resourceType();
                if (['image', 'font', 'media', 'stylesheet'].includes(resourceType)) {
                    route.abort();
                } else {
                    route.continue();
                }
            });
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const targetUrl = `https://truthsocial.com/@${targetUsername}`;
            logger.info(`üìç [Tab #${tabId}] [${account.username}] Navigating to ${targetUrl}`);
            
            await page.goto(targetUrl, {
                waitUntil: 'domcontentloaded',
                timeout: 15000
            });
            
            logger.info(`üìÑ [Tab #${tabId}] [${account.username}] Page loaded for @${targetUsername}`);

            // –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∂–¥–µ–º –ø–æ—Å—Ç –≤ —Ü–∏–∫–ª–µ, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º
            let attempts = 0;
            const maxAttempts = 60; // 60 –ø–æ–ø—ã—Ç–æ–∫ = 1 –º–∏–Ω—É—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            
            while (attempts < maxAttempts) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –∏ –±—Ä–∞—É–∑–µ—Ä –µ—â–µ –æ—Ç–∫—Ä—ã—Ç—ã
                    if (page.isClosed() || !account.browser || !account.context) {
                        logger.warn(`‚ùå [Tab #${tabId}] [${account.username}] Page or browser closed - stopping parsing`);
                        break;
                    }
                    
                    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
                    await page.waitForSelector('article, [data-testid="post"], .status', { 
                        timeout: 3000 
                    });
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    const blockCheck = await page.evaluate(() => {
                        const bodyText = document.body.textContent || '';
                        const title = document.title || '';
                        
                        const isBlocked = title.includes('Just a moment') || 
                                        bodyText.includes('–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ, —â–æ –≤–∏ –ª—é–¥–∏–Ω–∞') ||
                                        bodyText.includes('Checking your browser') ||
                                        bodyText.includes('Sorry, you have been blocked') ||
                                        bodyText.includes('You are unable to access truthsocial.com');
                        
                        return { isBlocked, title, bodyPreview: bodyText.substring(0, 100) };
                    });
                    
                    if (blockCheck.isBlocked) {
                        logger.warn(`üö´ [Tab #${tabId}] [${account.username}] Page blocked: ${blockCheck.title}`);
                        
// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        if (global.sendLogUpdate) {
                            global.sendLogUpdate({
                                level: 'error',
                                message: `üö´ [Tab #${tabId}] [${account.username}] Page blocked for @${targetUsername}`
                            });
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º IP –≤ –±–ª—ç–∫–ª–∏—Å—Ç
                        if (account.proxy && account.proxy.server) {
                            const proxyUrl = `http://${account.proxy.username}:${account.proxy.password}@${account.proxy.server}`;
                            await this.proxyManager.addBlacklistedProxy(proxyUrl, 'blocked during parsing');
                        }
                        
                        break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                    }
                    
                    // –ò—â–µ–º –ø–æ—Å—Ç—ã
                    const post = await page.evaluate(() => {
                        const selectors = [
                            '[data-testid="post"]', 
                            '[data-testid="tweet"]',
                            'article',
                            '.status',
                            '[role="article"]',
                            'main article',
                            '.feed article'
                        ];
                        
                        for (const selector of selectors) {
                            const postElements = document.querySelectorAll(selector);
                            
                            for (let i = 0; i < Math.min(postElements.length, 3); i++) {
                                const postElement = postElements[i];
                                const content = postElement.textContent?.trim();
                                
                                if (content && content.length > 20) {
                                    return {
                                        id: `${Date.now()}_${Math.random()}`,
                                        content: content.substring(0, 500),
                                        timestamp: new Date().toISOString(),
                                        url: window.location.href,
                                        foundWith: selector,
                                        postIndex: i
                                    };
                                }
                            }
                        }
                        
                        return null;
                    });
                    
                    if (post) {
                        const totalTime = Date.now() - startTime;
                        
                        // –£–°–ü–ï–•! –ü–æ–ª—É—á–∏–ª–∏ –ø–æ—Å—Ç
                        const timingStats = this.timingTracker.trackPostTiming(targetUsername, post.content);
                        
                        logger.info(`üéØ [Tab #${tabId}] [${account.username}] POST FOUND @${targetUsername} (${totalTime}ms, attempt ${attempts + 1}): ${post.content.substring(0, 80)}...`);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        if (global.sendLogUpdate) {
                            global.sendLogUpdate({
                                level: 'success',
                                message: `üéØ [Tab #${tabId}] POST FOUND @${targetUsername} (${account.username}, ${totalTime}ms): ${post.content.substring(0, 80)}...`
                            });
                        }
                        
                        if (global.io) {
                            global.io.emit('new-post', {
                                username: targetUsername,
                                content: post.content,
                                timestamp: post.timestamp,
                                url: post.url,
                                parseTime: totalTime,
                                parsedBy: account.username,
                                accountIP: account.proxy?.server,
                                tabId: tabId,
                                attempts: attempts + 1,
                                timingStats: timingStats,
                                foundWith: post.foundWith
                            });
                            
                            global.io.emit('log', {
                                level: 'success',
                                message: `üéØ [Tab #${tabId}] POST @${targetUsername} by ${account.username} (${totalTime}ms): ${post.content.substring(0, 50)}...`
                            });
                            
                            if (timingStats) {
                                global.io.emit('log', {
                                    level: 'timing',
                                    message: `‚è∞ Post interval: ${Math.round(timingStats.interval/1000)}s (avg: ${Math.round(timingStats.avgInterval/1000)}s)`
                                });
                            }
                        }
                        
                        // –ó–ê–ö–†–´–í–ê–ï–ú –í–ö–õ–ê–î–ö–£ - –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!
                        if (!page.isClosed()) {
                            await page.close();
                            logger.info(`‚úÖ [Tab #${tabId}] [${account.username}] Tab closed after successful post retrieval`);
                        }
                        return;
                    }
                    
                    // –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –∂–¥–µ–º –µ—â–µ
                    attempts++;
                    logger.info(`üì≠ [Tab #${tabId}] [${account.username}] No post yet @${targetUsername} (attempt ${attempts}/${maxAttempts}) - waiting...`);
                    
                    // –ß–ê–°–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if (attempts % 8 === 0) {  // –ö–∞–∂–¥—ã–µ 8 –ø–æ–ø—ã—Ç–æ–∫
                        try {
                            logger.info(`üîÑ [Tab #${tabId}] [${account.username}] Refreshing content (partial update)`);
                            
                            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                            await page.evaluate(() => {
                                // –°–∫—Ä–æ–ª–ª–∏–º —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
                                window.scrollTo(0, 0);
                                
                                // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ F5 —á–µ—Ä–µ–∑ JavaScript (–º—è–≥–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞)
                                if (typeof window.location.reload === 'function') {
                                    window.location.reload(false); // false = –∏–∑ –∫—ç—à–∞
                                }
                            });
                            
                            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –º—è–≥–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            await new Promise(resolve => setTimeout(resolve, 3000));
                            
                            logger.info(`‚úÖ [Tab #${tabId}] [${account.username}] Content refresh completed`);
                            
                        } catch (refreshError) {
                            logger.warn(`‚ö†Ô∏è [Tab #${tabId}] [${account.username}] Content refresh failed: ${refreshError.message}`);
                            
                            // –ï—Å–ª–∏ –º—è–≥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
                            try {
                                if (!page.isClosed()) {
                                    await page.reload({ waitUntil: 'domcontentloaded', timeout: 10000 });
                                }
                            } catch (hardRefreshError) {
                                logger.warn(`‚ö†Ô∏è [Tab #${tabId}] [${account.username}] Hard refresh also failed: ${hardRefreshError.message}`);
                            }
                        }
                    }
                    
                    // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    
                } catch (waitError) {
                    attempts++;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
                    if (waitError.message.includes('Target page, context or browser has been closed')) {
                        logger.warn(`‚ùå [Tab #${tabId}] [${account.username}] Browser/page closed - stopping parsing`);
                        break;
                    }
                    
                    logger.warn(`‚ö†Ô∏è [Tab #${tabId}] [${account.username}] Wait attempt ${attempts} failed: ${waitError.message.substring(0, 50)}`);
                    
                    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 6 –ø–æ–ø—ã—Ç–æ–∫ (—Ä–µ–∂–µ)
                    if (attempts % 6 === 0) {
                        try {
                            logger.info(`üîÑ [Tab #${tabId}] [${account.username}] Attempting gentle recovery`);
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–∞
                            if (!page.isClosed()) {
                                // –ú—è–≥–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                                await page.reload({ waitUntil: 'domcontentloaded', timeout: 15000 });
                                logger.info(`‚úÖ [Tab #${tabId}] [${account.username}] Gentle recovery successful`);
                            }
                        } catch (recoveryError) {
                            logger.warn(`‚ö†Ô∏è [Tab #${tabId}] [${account.username}] Recovery failed: ${recoveryError.message}`);
                            
                            // –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç
                            if (recoveryError.message.includes('Target page, context or browser has been closed')) {
                                break;
                            }
                        }
                    }
                }
            }
            
            // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            const totalTime = Date.now() - startTime;
            logger.warn(`‚è∞ [Tab #${tabId}] [${account.username}] Timeout after ${maxAttempts} attempts (${totalTime}ms) - closing tab`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if (global.sendLogUpdate) {
                global.sendLogUpdate({
                    level: 'warning',
                    message: `‚è∞ [Tab #${tabId}] [${account.username}] Timeout after ${Math.round(totalTime/1000)}s - no posts found for @${targetUsername}`
                });
            }
            
            if (global.io) {
                global.io.emit('log', {
                    level: 'warning',
                    message: `‚è∞ [Tab #${tabId}] ${account.username} timeout after ${Math.round(totalTime/1000)}s - no posts found`
                });
            }
            
        } catch (error) {
            const totalTime = Date.now() - startTime;
            logger.error(`‚ùå [Tab #${tabId}] [${account.username}] Critical error (${totalTime}ms): ${error.message}`);
            
            // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º IP –≤ –±–ª—ç–∫–ª–∏—Å—Ç
            if (error.message.includes('timeout') || error.message.includes('net::')) {
                if (account.proxy && account.proxy.server) {
                    const proxyUrl = `http://${account.proxy.username}:${account.proxy.password}@${account.proxy.server}`;
                    await this.proxyManager.addBlacklistedProxy(proxyUrl, 'critical error');
                }
            }
            
        } finally {
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
            if (page && !page.isClosed()) {
                try {
                    await page.close();
                    logger.info(`üóëÔ∏è [Tab #${tabId}] [${account.username}] Tab closed in finally block`);
                } catch (closeError) {
                    logger.warn(`‚ö†Ô∏è [Tab #${tabId}] [${account.username}] Failed to close tab: ${closeError.message}`);
                }
            }
        }
    }
}

module.exports = TabParser;